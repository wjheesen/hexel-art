// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
import * as Rect from "./rect";
import Structure from "../structify/struct";
import StructureBuffer from "../structify/buf";

/**
 * A 4x4 matrix.
 */
interface Mat4 {
    /**
     * The first entry in the first column of this Mat4.
     */
    c1r1: number;
    /**
     * The second entry in the first column of this Mat4.
     */
    c1r2: number;
    /**
     * The third entry in the first column of this Mat4.
     */
    c1r3: number;
    /**
     * The fourth entry in the first column of this Mat4.
     */
    c1r4: number;
    /**
     * The first entry in the second column of this Mat4.
     */
    c2r1: number;
    /**
     * The second entry in the second column of this Mat4.
     */
    c2r2: number;
    /**
     * The third entry in the second column of this Mat4.
     */
    c2r3: number;
    /**
     * The fourth entry in the second column of this Mat4.
     */
    c2r4: number;
    /**
     * The first entry in the third column of this Mat4.
     */
    c3r1: number;
    /**
     * The second entry in the third column of this Mat4.
     */
    c3r2: number;
    /**
     * The third entry in the third column of this Mat4.
     */
    c3r3: number;
    /**
     * The fourth entry in the third column of this Mat4.
     */
    c3r4: number;
    /**
     * The first entry in the fourth column of this Mat4.
     */
    c4r1: number;
    /**
     * The second entry in the fourth column of this Mat4.
     */
    c4r2: number;
    /**
     * The third entry in the fourth column of this Mat4.
     */
    c4r3: number;
    /**
     * The fourth entry in the fourth column of this Mat4.
     */
    c4r4: number;
}
export { Mat4 as _};
/**
 * Sets each component of this Mat4 to that of the other Mat4.
 */
export function set(_this: Mat4, other: Mat4) {
    _this.c1r1 = other.c1r1;
    _this.c1r2 = other.c1r2;
    _this.c1r3 = other.c1r3;
    _this.c1r4 = other.c1r4;
    _this.c2r1 = other.c2r1;
    _this.c2r2 = other.c2r2;
    _this.c2r3 = other.c2r3;
    _this.c2r4 = other.c2r4;
    _this.c3r1 = other.c3r1;
    _this.c3r2 = other.c3r2;
    _this.c3r3 = other.c3r3;
    _this.c3r4 = other.c3r4;
    _this.c4r1 = other.c4r1;
    _this.c4r2 = other.c4r2;
    _this.c4r3 = other.c4r3;
    _this.c4r4 = other.c4r4;
}

/**
 * Sets each component of this Mat4.
 */
export function set$(_this: Mat4, c1r1: number, c1r2: number, c1r3: number, c1r4: number, c2r1: number, c2r2: number, c2r3: number, c2r4: number, c3r1: number, c3r2: number, c3r3: number, c3r4: number, c4r1: number, c4r2: number, c4r3: number, c4r4: number) {
    _this.c1r1 = c1r1;
    _this.c1r2 = c1r2;
    _this.c1r3 = c1r3;
    _this.c1r4 = c1r4;
    _this.c2r1 = c2r1;
    _this.c2r2 = c2r2;
    _this.c2r3 = c2r3;
    _this.c2r4 = c2r4;
    _this.c3r1 = c3r1;
    _this.c3r2 = c3r2;
    _this.c3r3 = c3r3;
    _this.c3r4 = c3r4;
    _this.c4r1 = c4r1;
    _this.c4r2 = c4r2;
    _this.c4r3 = c4r3;
    _this.c4r4 = c4r4;
}

/**
 * Adds the other Mat4 to this Mat4 componentwise.
 */
export function add(_this: Mat4, other: Mat4) {
    _this.c1r1 += other.c1r1;
    _this.c1r2 += other.c1r2;
    _this.c1r3 += other.c1r3;
    _this.c1r4 += other.c1r4;
    _this.c2r1 += other.c2r1;
    _this.c2r2 += other.c2r2;
    _this.c2r3 += other.c2r3;
    _this.c2r4 += other.c2r4;
    _this.c3r1 += other.c3r1;
    _this.c3r2 += other.c3r2;
    _this.c3r3 += other.c3r3;
    _this.c3r4 += other.c3r4;
    _this.c4r1 += other.c4r1;
    _this.c4r2 += other.c4r2;
    _this.c4r3 += other.c4r3;
    _this.c4r4 += other.c4r4;
}

/**
 * Adds the specified values to this Mat4 componentwise.
 */
export function add$(_this: Mat4, c1r1: number, c1r2: number, c1r3: number, c1r4: number, c2r1: number, c2r2: number, c2r3: number, c2r4: number, c3r1: number, c3r2: number, c3r3: number, c3r4: number, c4r1: number, c4r2: number, c4r3: number, c4r4: number) {
    _this.c1r1 += c1r1;
    _this.c1r2 += c1r2;
    _this.c1r3 += c1r3;
    _this.c1r4 += c1r4;
    _this.c2r1 += c2r1;
    _this.c2r2 += c2r2;
    _this.c2r3 += c2r3;
    _this.c2r4 += c2r4;
    _this.c3r1 += c3r1;
    _this.c3r2 += c3r2;
    _this.c3r3 += c3r3;
    _this.c3r4 += c3r4;
    _this.c4r1 += c4r1;
    _this.c4r2 += c4r2;
    _this.c4r3 += c4r3;
    _this.c4r4 += c4r4;
}

/**
 * Subtracts the other Mat4 from this Mat4 componentwise.
 */
export function subtract(_this: Mat4, other: Mat4) {
    _this.c1r1 -= other.c1r1;
    _this.c1r2 -= other.c1r2;
    _this.c1r3 -= other.c1r3;
    _this.c1r4 -= other.c1r4;
    _this.c2r1 -= other.c2r1;
    _this.c2r2 -= other.c2r2;
    _this.c2r3 -= other.c2r3;
    _this.c2r4 -= other.c2r4;
    _this.c3r1 -= other.c3r1;
    _this.c3r2 -= other.c3r2;
    _this.c3r3 -= other.c3r3;
    _this.c3r4 -= other.c3r4;
    _this.c4r1 -= other.c4r1;
    _this.c4r2 -= other.c4r2;
    _this.c4r3 -= other.c4r3;
    _this.c4r4 -= other.c4r4;
}

/**
 * Subtracts the specified values from this Mat4 componentwise.
 */
export function subtract$(_this: Mat4, c1r1: number, c1r2: number, c1r3: number, c1r4: number, c2r1: number, c2r2: number, c2r3: number, c2r4: number, c3r1: number, c3r2: number, c3r3: number, c3r4: number, c4r1: number, c4r2: number, c4r3: number, c4r4: number) {
    _this.c1r1 -= c1r1;
    _this.c1r2 -= c1r2;
    _this.c1r3 -= c1r3;
    _this.c1r4 -= c1r4;
    _this.c2r1 -= c2r1;
    _this.c2r2 -= c2r2;
    _this.c2r3 -= c2r3;
    _this.c2r4 -= c2r4;
    _this.c3r1 -= c3r1;
    _this.c3r2 -= c3r2;
    _this.c3r3 -= c3r3;
    _this.c3r4 -= c3r4;
    _this.c4r1 -= c4r1;
    _this.c4r2 -= c4r2;
    _this.c4r3 -= c4r3;
    _this.c4r4 -= c4r4;
}

/**
 * Multiplies each component of this Mat4 by the specified scalar.
 */
export function mulScalar(_this: Mat4, k: number) {
    _this.c1r1 *= k;
    _this.c1r2 *= k;
    _this.c1r3 *= k;
    _this.c1r4 *= k;
    _this.c2r1 *= k;
    _this.c2r2 *= k;
    _this.c2r3 *= k;
    _this.c2r4 *= k;
    _this.c3r1 *= k;
    _this.c3r2 *= k;
    _this.c3r3 *= k;
    _this.c3r4 *= k;
    _this.c4r1 *= k;
    _this.c4r2 *= k;
    _this.c4r3 *= k;
    _this.c4r4 *= k;
}

/**
 * Divides each component of this Mat4 by the specified scalar.
 */
export function divScalar(_this: Mat4, k: number) {
    _this.c1r1 /= k;
    _this.c1r2 /= k;
    _this.c1r3 /= k;
    _this.c1r4 /= k;
    _this.c2r1 /= k;
    _this.c2r2 /= k;
    _this.c2r3 /= k;
    _this.c2r4 /= k;
    _this.c3r1 /= k;
    _this.c3r2 /= k;
    _this.c3r3 /= k;
    _this.c3r4 /= k;
    _this.c4r1 /= k;
    _this.c4r2 /= k;
    _this.c4r3 /= k;
    _this.c4r4 /= k;
}

/**
 * Checks if each component of this Mat4 is equal to that of the other Mat4.
 */
export function equals(_this: Mat4, other: Mat4) {
    return _this.c1r1 === other.c1r1 && _this.c1r2 === other.c1r2 && _this.c1r3 === other.c1r3 && _this.c1r4 === other.c1r4 && _this.c2r1 === other.c2r1 && _this.c2r2 === other.c2r2 && _this.c2r3 === other.c2r3 && _this.c2r4 === other.c2r4 && _this.c3r1 === other.c3r1 && _this.c3r2 === other.c3r2 && _this.c3r3 === other.c3r3 && _this.c3r4 === other.c3r4 && _this.c4r1 === other.c4r1 && _this.c4r2 === other.c4r2 && _this.c4r3 === other.c4r3 && _this.c4r4 === other.c4r4;
}

/**
 * Checks if each component of this Mat4 is equal to the specified scalar.
 */
export function equalsScalar(_this: Mat4, k: number) {
    return _this.c1r1 === k && _this.c1r2 === k && _this.c1r3 === k && _this.c1r4 === k && _this.c2r1 === k && _this.c2r2 === k && _this.c2r3 === k && _this.c2r4 === k && _this.c3r1 === k && _this.c3r2 === k && _this.c3r3 === k && _this.c3r4 === k && _this.c4r1 === k && _this.c4r2 === k && _this.c4r3 === k && _this.c4r4 === k;
}

/**
 * Checks if each component of this Mat4 is approximately equal to that of the other Mat4.
 */
export function epsilonEquals(_this: Mat4, other: Mat4, e: number) {
    return Math.abs(_this.c1r1 - other.c1r1) <= e && Math.abs(_this.c1r2 - other.c1r2) <= e && Math.abs(_this.c1r3 - other.c1r3) <= e && Math.abs(_this.c1r4 - other.c1r4) <= e && Math.abs(_this.c2r1 - other.c2r1) <= e && Math.abs(_this.c2r2 - other.c2r2) <= e && Math.abs(_this.c2r3 - other.c2r3) <= e && Math.abs(_this.c2r4 - other.c2r4) <= e && Math.abs(_this.c3r1 - other.c3r1) <= e && Math.abs(_this.c3r2 - other.c3r2) <= e && Math.abs(_this.c3r3 - other.c3r3) <= e && Math.abs(_this.c3r4 - other.c3r4) <= e && Math.abs(_this.c4r1 - other.c4r1) <= e && Math.abs(_this.c4r2 - other.c4r2) <= e && Math.abs(_this.c4r3 - other.c4r3) <= e && Math.abs(_this.c4r4 - other.c4r4) <= e;
}

/**
 * Checks if each component of this Mat4 is approximately equal to the specified scalar.
 */
export function epsilonEqualsScalar(_this: Mat4, k: number, e: number) {
    return Math.abs(_this.c1r1 - k) <= e && Math.abs(_this.c1r2 - k) <= e && Math.abs(_this.c1r3 - k) <= e && Math.abs(_this.c1r4 - k) <= e && Math.abs(_this.c2r1 - k) <= e && Math.abs(_this.c2r2 - k) <= e && Math.abs(_this.c2r3 - k) <= e && Math.abs(_this.c2r4 - k) <= e && Math.abs(_this.c3r1 - k) <= e && Math.abs(_this.c3r2 - k) <= e && Math.abs(_this.c3r3 - k) <= e && Math.abs(_this.c3r4 - k) <= e && Math.abs(_this.c4r1 - k) <= e && Math.abs(_this.c4r2 - k) <= e && Math.abs(_this.c4r3 - k) <= e && Math.abs(_this.c4r4 - k) <= e;
}

/**
 * Returns a string representation of this Mat4.
 */
export function toString(_this: Mat4) {
    return `{ c1r1: ${_this.c1r1}, c1r2: ${_this.c1r2}, c1r3: ${_this.c1r3}, c1r4: ${_this.c1r4}, c2r1: ${_this.c2r1}, c2r2: ${_this.c2r2}, c2r3: ${_this.c2r3}, c2r4: ${_this.c2r4}, c3r1: ${_this.c3r1}, c3r2: ${_this.c3r2}, c3r3: ${_this.c3r3}, c3r4: ${_this.c3r4}, c4r1: ${_this.c4r1}, c4r2: ${_this.c4r2}, c4r3: ${_this.c4r3}, c4r4: ${_this.c4r4} }`
}

/**
 * Sets this Mat4 to an othogonal transformation matrix given the
 * dimensions of the near clipping plane as well as the
 * near and far clipping plane distances.
 * @param left left side of the near clipping plane viewport.
 * @param right side of the near clipping plane viewport.
 * @param top top of the near clipping plane viewport.
 * @param bottom bottom of the near clipping plane viewport.
 * @param near the depth (negative z coordinate) of the near clipping plane.
 * @param far the depth (negative z coordinate) of the far clipping plane.
 * @param dst where to store the result. Defaults to new Mat4.
 * @returns the ortho matrix.
 */
export function ortho(_this: Mat4, clip: Rect._, near: number, far: number) {
    ortho$(_this, clip.left, clip.right, clip.bottom, clip.top, near, far);
}

/**
 * Sets this Mat4 to an othogonal transformation matrix given the left, right,
 * bottom, and top dimensions of the near clipping plane as well as the
 * near and far clipping plane distances.
 * @param left left side of the near clipping plane viewport.
 * @param right side of the near clipping plane viewport.
 * @param top top of the near clipping plane viewport.
 * @param bottom bottom of the near clipping plane viewport.
 * @param near the depth (negative z coordinate) of the near clipping plane.
 * @param far the depth (negative z coordinate) of the far clipping plane.
 * @param dst where to store the result. Defaults to new Mat4.
 * @returns the ortho matrix.
 */
export function ortho$(_this: Mat4, left: number, right: number, bottom: number, top: number, near: number, far: number) {
    let width = right - left,
                height = top - bottom,
                depth = near - far;
    _this.c1r1 = 2 / width;
    _this.c1r2 = 0;
    _this.c1r3 = 0;
    _this.c1r4 = 0;
    _this.c2r1 = 0;
    _this.c2r2 = 2 / height;
    _this.c2r3 = 0;
    _this.c2r4 = 0;
    _this.c3r1 = 0;
    _this.c3r2 = 0;
    _this.c3r3 = 1 / depth;
    _this.c3r4 = 0;
    _this.c4r1 = -(right + left) / width;
    _this.c4r2 = -(top + bottom) / height;
    _this.c4r3 = -near / depth;
    _this.c4r4 = 1;
}

/**
 * A 4x4 matrix.
 */
export class Obj {
    static create(other: Mat4) {
        let Mat4 = new Obj();
        Mat4.set(other);
        return Mat4;
    }

    static create$(c1r1: number, c1r2: number, c1r3: number, c1r4: number, c2r1: number, c2r2: number, c2r3: number, c2r4: number, c3r1: number, c3r2: number, c3r3: number, c3r4: number, c4r1: number, c4r2: number, c4r3: number, c4r4: number) {
        let Mat4 = new Obj();
        Mat4.set$(c1r1, c1r2, c1r3, c1r4, c2r1, c2r2, c2r3, c2r4, c3r1, c3r2, c3r3, c3r4, c4r1, c4r2, c4r3, c4r4);
        return Mat4;
    }

    /**
     * The first entry in the first column of this Mat4.
     */
    c1r1: number;
    /**
     * The second entry in the first column of this Mat4.
     */
    c1r2: number;
    /**
     * The third entry in the first column of this Mat4.
     */
    c1r3: number;
    /**
     * The fourth entry in the first column of this Mat4.
     */
    c1r4: number;
    /**
     * The first entry in the second column of this Mat4.
     */
    c2r1: number;
    /**
     * The second entry in the second column of this Mat4.
     */
    c2r2: number;
    /**
     * The third entry in the second column of this Mat4.
     */
    c2r3: number;
    /**
     * The fourth entry in the second column of this Mat4.
     */
    c2r4: number;
    /**
     * The first entry in the third column of this Mat4.
     */
    c3r1: number;
    /**
     * The second entry in the third column of this Mat4.
     */
    c3r2: number;
    /**
     * The third entry in the third column of this Mat4.
     */
    c3r3: number;
    /**
     * The fourth entry in the third column of this Mat4.
     */
    c3r4: number;
    /**
     * The first entry in the fourth column of this Mat4.
     */
    c4r1: number;
    /**
     * The second entry in the fourth column of this Mat4.
     */
    c4r2: number;
    /**
     * The third entry in the fourth column of this Mat4.
     */
    c4r3: number;
    /**
     * The fourth entry in the fourth column of this Mat4.
     */
    c4r4: number;

    /**
     * Sets each component of this Mat4 to that of the other Mat4.
     */
    set(other: Mat4) {
        return set(this, other);
    }

    /**
     * Sets each component of this Mat4.
     */
    set$(c1r1: number, c1r2: number, c1r3: number, c1r4: number, c2r1: number, c2r2: number, c2r3: number, c2r4: number, c3r1: number, c3r2: number, c3r3: number, c3r4: number, c4r1: number, c4r2: number, c4r3: number, c4r4: number) {
        return set$(this, c1r1, c1r2, c1r3, c1r4, c2r1, c2r2, c2r3, c2r4, c3r1, c3r2, c3r3, c3r4, c4r1, c4r2, c4r3, c4r4);
    }

    /**
     * Adds the other Mat4 to this Mat4 componentwise.
     */
    add(other: Mat4) {
        return add(this, other);
    }

    /**
     * Adds the specified values to this Mat4 componentwise.
     */
    add$(c1r1: number, c1r2: number, c1r3: number, c1r4: number, c2r1: number, c2r2: number, c2r3: number, c2r4: number, c3r1: number, c3r2: number, c3r3: number, c3r4: number, c4r1: number, c4r2: number, c4r3: number, c4r4: number) {
        return add$(this, c1r1, c1r2, c1r3, c1r4, c2r1, c2r2, c2r3, c2r4, c3r1, c3r2, c3r3, c3r4, c4r1, c4r2, c4r3, c4r4);
    }

    /**
     * Subtracts the other Mat4 from this Mat4 componentwise.
     */
    subtract(other: Mat4) {
        return subtract(this, other);
    }

    /**
     * Subtracts the specified values from this Mat4 componentwise.
     */
    subtract$(c1r1: number, c1r2: number, c1r3: number, c1r4: number, c2r1: number, c2r2: number, c2r3: number, c2r4: number, c3r1: number, c3r2: number, c3r3: number, c3r4: number, c4r1: number, c4r2: number, c4r3: number, c4r4: number) {
        return subtract$(this, c1r1, c1r2, c1r3, c1r4, c2r1, c2r2, c2r3, c2r4, c3r1, c3r2, c3r3, c3r4, c4r1, c4r2, c4r3, c4r4);
    }

    /**
     * Multiplies each component of this Mat4 by the specified scalar.
     */
    mulScalar(k: number) {
        return mulScalar(this, k);
    }

    /**
     * Divides each component of this Mat4 by the specified scalar.
     */
    divScalar(k: number) {
        return divScalar(this, k);
    }

    /**
     * Checks if each component of this Mat4 is equal to that of the other Mat4.
     */
    equals(other: Mat4) {
        return equals(this, other);
    }

    /**
     * Checks if each component of this Mat4 is equal to the specified scalar.
     */
    equalsScalar(k: number) {
        return equalsScalar(this, k);
    }

    /**
     * Checks if each component of this Mat4 is approximately equal to that of the other Mat4.
     */
    epsilonEquals(other: Mat4, e: number) {
        return epsilonEquals(this, other, e);
    }

    /**
     * Checks if each component of this Mat4 is approximately equal to the specified scalar.
     */
    epsilonEqualsScalar(k: number, e: number) {
        return epsilonEqualsScalar(this, k, e);
    }

    /**
     * Returns a string representation of this Mat4.
     */
    toString() {
        return toString(this);
    }

    /**
     * Sets this Mat4 to an othogonal transformation matrix given the
     * dimensions of the near clipping plane as well as the
     * near and far clipping plane distances.
     * @param left left side of the near clipping plane viewport.
     * @param right side of the near clipping plane viewport.
     * @param top top of the near clipping plane viewport.
     * @param bottom bottom of the near clipping plane viewport.
     * @param near the depth (negative z coordinate) of the near clipping plane.
     * @param far the depth (negative z coordinate) of the far clipping plane.
     * @param dst where to store the result. Defaults to new Mat4.
     * @returns the ortho matrix.
     */
    ortho(clip: Rect._, near: number, far: number) {
        return ortho(this, clip, near, far);
    }

    /**
     * Sets this Mat4 to an othogonal transformation matrix given the left, right,
     * bottom, and top dimensions of the near clipping plane as well as the
     * near and far clipping plane distances.
     * @param left left side of the near clipping plane viewport.
     * @param right side of the near clipping plane viewport.
     * @param top top of the near clipping plane viewport.
     * @param bottom bottom of the near clipping plane viewport.
     * @param near the depth (negative z coordinate) of the near clipping plane.
     * @param far the depth (negative z coordinate) of the far clipping plane.
     * @param dst where to store the result. Defaults to new Mat4.
     * @returns the ortho matrix.
     */
    ortho$(left: number, right: number, bottom: number, top: number, near: number, far: number) {
        return ortho$(this, left, right, bottom, top, near, far);
    }
}

/**
 * A Mat4 backed by a Float32Array.
 */
export class Struct extends Structure<Float32Array> {
    static create(other: Mat4) {
        let Mat4 = new Struct();
        Mat4.set(other);
        return Mat4;
    }

    static create$(c1r1: number, c1r2: number, c1r3: number, c1r4: number, c2r1: number, c2r2: number, c2r3: number, c2r4: number, c3r1: number, c3r2: number, c3r3: number, c3r4: number, c4r1: number, c4r2: number, c4r3: number, c4r4: number) {
        let Mat4 = new Struct();
        Mat4.set$(c1r1, c1r2, c1r3, c1r4, c2r1, c2r2, c2r3, c2r4, c3r1, c3r2, c3r3, c3r4, c4r1, c4r2, c4r3, c4r4);
        return Mat4;
    }

    /**
     * Creates a Mat4 struct.
     */
    constructor() {
        super(new Float32Array(16));
    }

    /**
     * The first entry in the first column of this Mat4.
     */
    get c1r1() {
        return this.data[0];
    }

    /**
     * The first entry in the first column of this Mat4.
     */
    set c1r1(value: number) {
        this.data[0] = value;
    }

    /**
     * The second entry in the first column of this Mat4.
     */
    get c1r2() {
        return this.data[1];
    }

    /**
     * The second entry in the first column of this Mat4.
     */
    set c1r2(value: number) {
        this.data[1] = value;
    }

    /**
     * The third entry in the first column of this Mat4.
     */
    get c1r3() {
        return this.data[2];
    }

    /**
     * The third entry in the first column of this Mat4.
     */
    set c1r3(value: number) {
        this.data[2] = value;
    }

    /**
     * The fourth entry in the first column of this Mat4.
     */
    get c1r4() {
        return this.data[3];
    }

    /**
     * The fourth entry in the first column of this Mat4.
     */
    set c1r4(value: number) {
        this.data[3] = value;
    }

    /**
     * The first entry in the second column of this Mat4.
     */
    get c2r1() {
        return this.data[4];
    }

    /**
     * The first entry in the second column of this Mat4.
     */
    set c2r1(value: number) {
        this.data[4] = value;
    }

    /**
     * The second entry in the second column of this Mat4.
     */
    get c2r2() {
        return this.data[5];
    }

    /**
     * The second entry in the second column of this Mat4.
     */
    set c2r2(value: number) {
        this.data[5] = value;
    }

    /**
     * The third entry in the second column of this Mat4.
     */
    get c2r3() {
        return this.data[6];
    }

    /**
     * The third entry in the second column of this Mat4.
     */
    set c2r3(value: number) {
        this.data[6] = value;
    }

    /**
     * The fourth entry in the second column of this Mat4.
     */
    get c2r4() {
        return this.data[7];
    }

    /**
     * The fourth entry in the second column of this Mat4.
     */
    set c2r4(value: number) {
        this.data[7] = value;
    }

    /**
     * The first entry in the third column of this Mat4.
     */
    get c3r1() {
        return this.data[8];
    }

    /**
     * The first entry in the third column of this Mat4.
     */
    set c3r1(value: number) {
        this.data[8] = value;
    }

    /**
     * The second entry in the third column of this Mat4.
     */
    get c3r2() {
        return this.data[9];
    }

    /**
     * The second entry in the third column of this Mat4.
     */
    set c3r2(value: number) {
        this.data[9] = value;
    }

    /**
     * The third entry in the third column of this Mat4.
     */
    get c3r3() {
        return this.data[10];
    }

    /**
     * The third entry in the third column of this Mat4.
     */
    set c3r3(value: number) {
        this.data[10] = value;
    }

    /**
     * The fourth entry in the third column of this Mat4.
     */
    get c3r4() {
        return this.data[11];
    }

    /**
     * The fourth entry in the third column of this Mat4.
     */
    set c3r4(value: number) {
        this.data[11] = value;
    }

    /**
     * The first entry in the fourth column of this Mat4.
     */
    get c4r1() {
        return this.data[12];
    }

    /**
     * The first entry in the fourth column of this Mat4.
     */
    set c4r1(value: number) {
        this.data[12] = value;
    }

    /**
     * The second entry in the fourth column of this Mat4.
     */
    get c4r2() {
        return this.data[13];
    }

    /**
     * The second entry in the fourth column of this Mat4.
     */
    set c4r2(value: number) {
        this.data[13] = value;
    }

    /**
     * The third entry in the fourth column of this Mat4.
     */
    get c4r3() {
        return this.data[14];
    }

    /**
     * The third entry in the fourth column of this Mat4.
     */
    set c4r3(value: number) {
        this.data[14] = value;
    }

    /**
     * The fourth entry in the fourth column of this Mat4.
     */
    get c4r4() {
        return this.data[15];
    }

    /**
     * The fourth entry in the fourth column of this Mat4.
     */
    set c4r4(value: number) {
        this.data[15] = value;
    }

    /**
     * Sets each component of this Mat4 to that of the other Mat4.
     */
    set(other: Mat4) {
        return set(this, other);
    }

    /**
     * Sets each component of this Mat4.
     */
    set$(c1r1: number, c1r2: number, c1r3: number, c1r4: number, c2r1: number, c2r2: number, c2r3: number, c2r4: number, c3r1: number, c3r2: number, c3r3: number, c3r4: number, c4r1: number, c4r2: number, c4r3: number, c4r4: number) {
        return set$(this, c1r1, c1r2, c1r3, c1r4, c2r1, c2r2, c2r3, c2r4, c3r1, c3r2, c3r3, c3r4, c4r1, c4r2, c4r3, c4r4);
    }

    /**
     * Adds the other Mat4 to this Mat4 componentwise.
     */
    add(other: Mat4) {
        return add(this, other);
    }

    /**
     * Adds the specified values to this Mat4 componentwise.
     */
    add$(c1r1: number, c1r2: number, c1r3: number, c1r4: number, c2r1: number, c2r2: number, c2r3: number, c2r4: number, c3r1: number, c3r2: number, c3r3: number, c3r4: number, c4r1: number, c4r2: number, c4r3: number, c4r4: number) {
        return add$(this, c1r1, c1r2, c1r3, c1r4, c2r1, c2r2, c2r3, c2r4, c3r1, c3r2, c3r3, c3r4, c4r1, c4r2, c4r3, c4r4);
    }

    /**
     * Subtracts the other Mat4 from this Mat4 componentwise.
     */
    subtract(other: Mat4) {
        return subtract(this, other);
    }

    /**
     * Subtracts the specified values from this Mat4 componentwise.
     */
    subtract$(c1r1: number, c1r2: number, c1r3: number, c1r4: number, c2r1: number, c2r2: number, c2r3: number, c2r4: number, c3r1: number, c3r2: number, c3r3: number, c3r4: number, c4r1: number, c4r2: number, c4r3: number, c4r4: number) {
        return subtract$(this, c1r1, c1r2, c1r3, c1r4, c2r1, c2r2, c2r3, c2r4, c3r1, c3r2, c3r3, c3r4, c4r1, c4r2, c4r3, c4r4);
    }

    /**
     * Multiplies each component of this Mat4 by the specified scalar.
     */
    mulScalar(k: number) {
        return mulScalar(this, k);
    }

    /**
     * Divides each component of this Mat4 by the specified scalar.
     */
    divScalar(k: number) {
        return divScalar(this, k);
    }

    /**
     * Checks if each component of this Mat4 is equal to that of the other Mat4.
     */
    equals(other: Mat4) {
        return equals(this, other);
    }

    /**
     * Checks if each component of this Mat4 is equal to the specified scalar.
     */
    equalsScalar(k: number) {
        return equalsScalar(this, k);
    }

    /**
     * Checks if each component of this Mat4 is approximately equal to that of the other Mat4.
     */
    epsilonEquals(other: Mat4, e: number) {
        return epsilonEquals(this, other, e);
    }

    /**
     * Checks if each component of this Mat4 is approximately equal to the specified scalar.
     */
    epsilonEqualsScalar(k: number, e: number) {
        return epsilonEqualsScalar(this, k, e);
    }

    /**
     * Returns a string representation of this Mat4.
     */
    toString() {
        return toString(this);
    }

    /**
     * Sets this Mat4 to an othogonal transformation matrix given the
     * dimensions of the near clipping plane as well as the
     * near and far clipping plane distances.
     * @param left left side of the near clipping plane viewport.
     * @param right side of the near clipping plane viewport.
     * @param top top of the near clipping plane viewport.
     * @param bottom bottom of the near clipping plane viewport.
     * @param near the depth (negative z coordinate) of the near clipping plane.
     * @param far the depth (negative z coordinate) of the far clipping plane.
     * @param dst where to store the result. Defaults to new Mat4.
     * @returns the ortho matrix.
     */
    ortho(clip: Rect._, near: number, far: number) {
        return ortho(this, clip, near, far);
    }

    /**
     * Sets this Mat4 to an othogonal transformation matrix given the left, right,
     * bottom, and top dimensions of the near clipping plane as well as the
     * near and far clipping plane distances.
     * @param left left side of the near clipping plane viewport.
     * @param right side of the near clipping plane viewport.
     * @param top top of the near clipping plane viewport.
     * @param bottom bottom of the near clipping plane viewport.
     * @param near the depth (negative z coordinate) of the near clipping plane.
     * @param far the depth (negative z coordinate) of the far clipping plane.
     * @param dst where to store the result. Defaults to new Mat4.
     * @returns the ortho matrix.
     */
    ortho$(left: number, right: number, bottom: number, top: number, near: number, far: number) {
        return ortho$(this, left, right, bottom, top, near, far);
    }
}

/**
 * A Mat4 buffer backed by a Float32Array.
 */
export class Buf extends StructureBuffer<Float32Array> {
    /**
     * Creates an empty Mat4 buffer with the specified Mat4 capacity.
     */
    static create(capacity: number) {
        return new Buf(new Float32Array(capacity * 16));
    }

    /**
     * The first entry in the first column of the current Mat4.
     */
    get c1r1() {
        return this.data[this.dataPosition + 0];
    }

    /**
     * The first entry in the first column of the current Mat4.
     */
    set c1r1(value: number) {
        this.data[this.dataPosition + 0] = value;
    }

    /**
     * The second entry in the first column of the current Mat4.
     */
    get c1r2() {
        return this.data[this.dataPosition + 1];
    }

    /**
     * The second entry in the first column of the current Mat4.
     */
    set c1r2(value: number) {
        this.data[this.dataPosition + 1] = value;
    }

    /**
     * The third entry in the first column of the current Mat4.
     */
    get c1r3() {
        return this.data[this.dataPosition + 2];
    }

    /**
     * The third entry in the first column of the current Mat4.
     */
    set c1r3(value: number) {
        this.data[this.dataPosition + 2] = value;
    }

    /**
     * The fourth entry in the first column of the current Mat4.
     */
    get c1r4() {
        return this.data[this.dataPosition + 3];
    }

    /**
     * The fourth entry in the first column of the current Mat4.
     */
    set c1r4(value: number) {
        this.data[this.dataPosition + 3] = value;
    }

    /**
     * The first entry in the second column of the current Mat4.
     */
    get c2r1() {
        return this.data[this.dataPosition + 4];
    }

    /**
     * The first entry in the second column of the current Mat4.
     */
    set c2r1(value: number) {
        this.data[this.dataPosition + 4] = value;
    }

    /**
     * The second entry in the second column of the current Mat4.
     */
    get c2r2() {
        return this.data[this.dataPosition + 5];
    }

    /**
     * The second entry in the second column of the current Mat4.
     */
    set c2r2(value: number) {
        this.data[this.dataPosition + 5] = value;
    }

    /**
     * The third entry in the second column of the current Mat4.
     */
    get c2r3() {
        return this.data[this.dataPosition + 6];
    }

    /**
     * The third entry in the second column of the current Mat4.
     */
    set c2r3(value: number) {
        this.data[this.dataPosition + 6] = value;
    }

    /**
     * The fourth entry in the second column of the current Mat4.
     */
    get c2r4() {
        return this.data[this.dataPosition + 7];
    }

    /**
     * The fourth entry in the second column of the current Mat4.
     */
    set c2r4(value: number) {
        this.data[this.dataPosition + 7] = value;
    }

    /**
     * The first entry in the third column of the current Mat4.
     */
    get c3r1() {
        return this.data[this.dataPosition + 8];
    }

    /**
     * The first entry in the third column of the current Mat4.
     */
    set c3r1(value: number) {
        this.data[this.dataPosition + 8] = value;
    }

    /**
     * The second entry in the third column of the current Mat4.
     */
    get c3r2() {
        return this.data[this.dataPosition + 9];
    }

    /**
     * The second entry in the third column of the current Mat4.
     */
    set c3r2(value: number) {
        this.data[this.dataPosition + 9] = value;
    }

    /**
     * The third entry in the third column of the current Mat4.
     */
    get c3r3() {
        return this.data[this.dataPosition + 10];
    }

    /**
     * The third entry in the third column of the current Mat4.
     */
    set c3r3(value: number) {
        this.data[this.dataPosition + 10] = value;
    }

    /**
     * The fourth entry in the third column of the current Mat4.
     */
    get c3r4() {
        return this.data[this.dataPosition + 11];
    }

    /**
     * The fourth entry in the third column of the current Mat4.
     */
    set c3r4(value: number) {
        this.data[this.dataPosition + 11] = value;
    }

    /**
     * The first entry in the fourth column of the current Mat4.
     */
    get c4r1() {
        return this.data[this.dataPosition + 12];
    }

    /**
     * The first entry in the fourth column of the current Mat4.
     */
    set c4r1(value: number) {
        this.data[this.dataPosition + 12] = value;
    }

    /**
     * The second entry in the fourth column of the current Mat4.
     */
    get c4r2() {
        return this.data[this.dataPosition + 13];
    }

    /**
     * The second entry in the fourth column of the current Mat4.
     */
    set c4r2(value: number) {
        this.data[this.dataPosition + 13] = value;
    }

    /**
     * The third entry in the fourth column of the current Mat4.
     */
    get c4r3() {
        return this.data[this.dataPosition + 14];
    }

    /**
     * The third entry in the fourth column of the current Mat4.
     */
    set c4r3(value: number) {
        this.data[this.dataPosition + 14] = value;
    }

    /**
     * The fourth entry in the fourth column of the current Mat4.
     */
    get c4r4() {
        return this.data[this.dataPosition + 15];
    }

    /**
     * The fourth entry in the fourth column of the current Mat4.
     */
    set c4r4(value: number) {
        this.data[this.dataPosition + 15] = value;
    }

    /**
     * Gets the number of components in a Mat4, namely 16.
     */
    structLength() {
        return 16;
    }

    /**
     * Sets each component of the Mat4 at the specified position.
     */
    set$(position: number, c1r1: number, c1r2: number, c1r3: number, c1r4: number, c2r1: number, c2r2: number, c2r3: number, c2r4: number, c3r1: number, c3r2: number, c3r3: number, c3r4: number, c4r1: number, c4r2: number, c4r3: number, c4r4: number) {
        let dataPos = position * this.structLength();
        this.data[dataPos++] = c1r1;
        this.data[dataPos++] = c1r2;
        this.data[dataPos++] = c1r3;
        this.data[dataPos++] = c1r4;
        this.data[dataPos++] = c2r1;
        this.data[dataPos++] = c2r2;
        this.data[dataPos++] = c2r3;
        this.data[dataPos++] = c2r4;
        this.data[dataPos++] = c3r1;
        this.data[dataPos++] = c3r2;
        this.data[dataPos++] = c3r3;
        this.data[dataPos++] = c3r4;
        this.data[dataPos++] = c4r1;
        this.data[dataPos++] = c4r2;
        this.data[dataPos++] = c4r3;
        this.data[dataPos++] = c4r4;
    }

    /**
     * Sets each component of the current Mat4, then moves to the next position of this buffer.
     */
    put$(c1r1: number, c1r2: number, c1r3: number, c1r4: number, c2r1: number, c2r2: number, c2r3: number, c2r4: number, c3r1: number, c3r2: number, c3r3: number, c3r4: number, c4r1: number, c4r2: number, c4r3: number, c4r4: number) {
        this.data[this.dataPosition++] = c1r1;
        this.data[this.dataPosition++] = c1r2;
        this.data[this.dataPosition++] = c1r3;
        this.data[this.dataPosition++] = c1r4;
        this.data[this.dataPosition++] = c2r1;
        this.data[this.dataPosition++] = c2r2;
        this.data[this.dataPosition++] = c2r3;
        this.data[this.dataPosition++] = c2r4;
        this.data[this.dataPosition++] = c3r1;
        this.data[this.dataPosition++] = c3r2;
        this.data[this.dataPosition++] = c3r3;
        this.data[this.dataPosition++] = c3r4;
        this.data[this.dataPosition++] = c4r1;
        this.data[this.dataPosition++] = c4r2;
        this.data[this.dataPosition++] = c4r3;
        this.data[this.dataPosition++] = c4r4;
    }

    /**
     * Sets each component of the current Mat4 to that of the other Mat4.
     */
    $set(other: Mat4) {
        return set(this, other);
    }

    /**
     * Sets each component of the current Mat4.
     */
    $set$(c1r1: number, c1r2: number, c1r3: number, c1r4: number, c2r1: number, c2r2: number, c2r3: number, c2r4: number, c3r1: number, c3r2: number, c3r3: number, c3r4: number, c4r1: number, c4r2: number, c4r3: number, c4r4: number) {
        return set$(this, c1r1, c1r2, c1r3, c1r4, c2r1, c2r2, c2r3, c2r4, c3r1, c3r2, c3r3, c3r4, c4r1, c4r2, c4r3, c4r4);
    }

    /**
     * Adds the other Mat4 to the current Mat4 componentwise.
     */
    $add(other: Mat4) {
        return add(this, other);
    }

    /**
     * Adds the specified values to the current Mat4 componentwise.
     */
    $add$(c1r1: number, c1r2: number, c1r3: number, c1r4: number, c2r1: number, c2r2: number, c2r3: number, c2r4: number, c3r1: number, c3r2: number, c3r3: number, c3r4: number, c4r1: number, c4r2: number, c4r3: number, c4r4: number) {
        return add$(this, c1r1, c1r2, c1r3, c1r4, c2r1, c2r2, c2r3, c2r4, c3r1, c3r2, c3r3, c3r4, c4r1, c4r2, c4r3, c4r4);
    }

    /**
     * Subtracts the other Mat4 from the current Mat4 componentwise.
     */
    $subtract(other: Mat4) {
        return subtract(this, other);
    }

    /**
     * Subtracts the specified values from the current Mat4 componentwise.
     */
    $subtract$(c1r1: number, c1r2: number, c1r3: number, c1r4: number, c2r1: number, c2r2: number, c2r3: number, c2r4: number, c3r1: number, c3r2: number, c3r3: number, c3r4: number, c4r1: number, c4r2: number, c4r3: number, c4r4: number) {
        return subtract$(this, c1r1, c1r2, c1r3, c1r4, c2r1, c2r2, c2r3, c2r4, c3r1, c3r2, c3r3, c3r4, c4r1, c4r2, c4r3, c4r4);
    }

    /**
     * Multiplies each component of the current Mat4 by the specified scalar.
     */
    $mulScalar(k: number) {
        return mulScalar(this, k);
    }

    /**
     * Divides each component of the current Mat4 by the specified scalar.
     */
    $divScalar(k: number) {
        return divScalar(this, k);
    }

    /**
     * Checks if each component of the current Mat4 is equal to that of the other Mat4.
     */
    $equals(other: Mat4) {
        return equals(this, other);
    }

    /**
     * Checks if each component of the current Mat4 is equal to the specified scalar.
     */
    $equalsScalar(k: number) {
        return equalsScalar(this, k);
    }

    /**
     * Checks if each component of the current Mat4 is approximately equal to that of the other Mat4.
     */
    $epsilonEquals(other: Mat4, e: number) {
        return epsilonEquals(this, other, e);
    }

    /**
     * Checks if each component of the current Mat4 is approximately equal to the specified scalar.
     */
    $epsilonEqualsScalar(k: number, e: number) {
        return epsilonEqualsScalar(this, k, e);
    }

    /**
     * Returns a string representation of the current Mat4.
     */
    $toString() {
        return toString(this);
    }

    /**
     * Sets the current Mat4 to an othogonal transformation matrix given the
     * dimensions of the near clipping plane as well as the
     * near and far clipping plane distances.
     * @param left left side of the near clipping plane viewport.
     * @param right side of the near clipping plane viewport.
     * @param top top of the near clipping plane viewport.
     * @param bottom bottom of the near clipping plane viewport.
     * @param near the depth (negative z coordinate) of the near clipping plane.
     * @param far the depth (negative z coordinate) of the far clipping plane.
     * @param dst where to store the result. Defaults to new Mat4.
     * @returns the ortho matrix.
     */
    $ortho(clip: Rect._, near: number, far: number) {
        return ortho(this, clip, near, far);
    }

    /**
     * Sets the current Mat4 to an othogonal transformation matrix given the left, right,
     * bottom, and top dimensions of the near clipping plane as well as the
     * near and far clipping plane distances.
     * @param left left side of the near clipping plane viewport.
     * @param right side of the near clipping plane viewport.
     * @param top top of the near clipping plane viewport.
     * @param bottom bottom of the near clipping plane viewport.
     * @param near the depth (negative z coordinate) of the near clipping plane.
     * @param far the depth (negative z coordinate) of the far clipping plane.
     * @param dst where to store the result. Defaults to new Mat4.
     * @returns the ortho matrix.
     */
    $ortho$(left: number, right: number, bottom: number, top: number, near: number, far: number) {
        return ortho$(this, left, right, bottom, top, near, far);
    }
}
