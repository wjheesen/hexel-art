// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
import Structure from "../structify/struct";
import StructureBuffer from "../structify/buf";

/**
 * Holds the three indices for a triangle.
 */
interface IndexTuple {
    /**
     * The index of the first triangle vertex.
     */
    first: number;
    /**
     * The index of the second triangle vertex.
     */
    second: number;
    /**
     * The index of the third triangle vertex.
     */
    third: number;
}
export { IndexTuple as _};
/**
 * Sets each component of this IndexTuple to that of the other IndexTuple.
 */
export function set(_this: IndexTuple, other: IndexTuple) {
    _this.first = other.first;
    _this.second = other.second;
    _this.third = other.third;
}

/**
 * Sets each component of this IndexTuple.
 */
export function set$(_this: IndexTuple, first: number, second: number, third: number) {
    _this.first = first;
    _this.second = second;
    _this.third = third;
}

/**
 * Adds the other IndexTuple to this IndexTuple componentwise.
 */
export function add(_this: IndexTuple, other: IndexTuple) {
    _this.first += other.first;
    _this.second += other.second;
    _this.third += other.third;
}

/**
 * Adds the specified values to this IndexTuple componentwise.
 */
export function add$(_this: IndexTuple, first: number, second: number, third: number) {
    _this.first += first;
    _this.second += second;
    _this.third += third;
}

/**
 * Subtracts the other IndexTuple from this IndexTuple componentwise.
 */
export function subtract(_this: IndexTuple, other: IndexTuple) {
    _this.first -= other.first;
    _this.second -= other.second;
    _this.third -= other.third;
}

/**
 * Subtracts the specified values from this IndexTuple componentwise.
 */
export function subtract$(_this: IndexTuple, first: number, second: number, third: number) {
    _this.first -= first;
    _this.second -= second;
    _this.third -= third;
}

/**
 * Multiplies each component of this IndexTuple by the specified scalar.
 */
export function mulScalar(_this: IndexTuple, k: number) {
    _this.first *= k;
    _this.second *= k;
    _this.third *= k;
}

/**
 * Divides each component of this IndexTuple by the specified scalar.
 */
export function divScalar(_this: IndexTuple, k: number) {
    _this.first /= k;
    _this.second /= k;
    _this.third /= k;
}

/**
 * Checks if each component of this IndexTuple is equal to that of the other IndexTuple.
 */
export function equals(_this: IndexTuple, other: IndexTuple) {
    return _this.first === other.first && _this.second === other.second && _this.third === other.third;
}

/**
 * Checks if each component of this IndexTuple is equal to the specified scalar.
 */
export function equalsScalar(_this: IndexTuple, k: number) {
    return _this.first === k && _this.second === k && _this.third === k;
}

/**
 * Checks if each component of this IndexTuple is approximately equal to that of the other IndexTuple.
 */
export function epsilonEquals(_this: IndexTuple, other: IndexTuple, e: number) {
    return Math.abs(_this.first - other.first) <= e && Math.abs(_this.second - other.second) <= e && Math.abs(_this.third - other.third) <= e;
}

/**
 * Checks if each component of this IndexTuple is approximately equal to the specified scalar.
 */
export function epsilonEqualsScalar(_this: IndexTuple, k: number, e: number) {
    return Math.abs(_this.first - k) <= e && Math.abs(_this.second - k) <= e && Math.abs(_this.third - k) <= e;
}

/**
 * Returns a string representation of this IndexTuple.
 */
export function toString(_this: IndexTuple) {
    return `{ first: ${_this.first}, second: ${_this.second}, third: ${_this.third} }`
}

/**
 * Holds the three indices for a triangle.
 */
export class Obj {
    static create(other: IndexTuple) {
        let IndexTuple = new Obj();
        IndexTuple.set(other);
        return IndexTuple;
    }

    static create$(first: number, second: number, third: number) {
        let IndexTuple = new Obj();
        IndexTuple.set$(first, second, third);
        return IndexTuple;
    }

    /**
     * The index of the first triangle vertex.
     */
    first: number;
    /**
     * The index of the second triangle vertex.
     */
    second: number;
    /**
     * The index of the third triangle vertex.
     */
    third: number;

    /**
     * Sets each component of this IndexTuple to that of the other IndexTuple.
     */
    set(other: IndexTuple) {
        return set(this, other);
    }

    /**
     * Sets each component of this IndexTuple.
     */
    set$(first: number, second: number, third: number) {
        return set$(this, first, second, third);
    }

    /**
     * Adds the other IndexTuple to this IndexTuple componentwise.
     */
    add(other: IndexTuple) {
        return add(this, other);
    }

    /**
     * Adds the specified values to this IndexTuple componentwise.
     */
    add$(first: number, second: number, third: number) {
        return add$(this, first, second, third);
    }

    /**
     * Subtracts the other IndexTuple from this IndexTuple componentwise.
     */
    subtract(other: IndexTuple) {
        return subtract(this, other);
    }

    /**
     * Subtracts the specified values from this IndexTuple componentwise.
     */
    subtract$(first: number, second: number, third: number) {
        return subtract$(this, first, second, third);
    }

    /**
     * Multiplies each component of this IndexTuple by the specified scalar.
     */
    mulScalar(k: number) {
        return mulScalar(this, k);
    }

    /**
     * Divides each component of this IndexTuple by the specified scalar.
     */
    divScalar(k: number) {
        return divScalar(this, k);
    }

    /**
     * Checks if each component of this IndexTuple is equal to that of the other IndexTuple.
     */
    equals(other: IndexTuple) {
        return equals(this, other);
    }

    /**
     * Checks if each component of this IndexTuple is equal to the specified scalar.
     */
    equalsScalar(k: number) {
        return equalsScalar(this, k);
    }

    /**
     * Checks if each component of this IndexTuple is approximately equal to that of the other IndexTuple.
     */
    epsilonEquals(other: IndexTuple, e: number) {
        return epsilonEquals(this, other, e);
    }

    /**
     * Checks if each component of this IndexTuple is approximately equal to the specified scalar.
     */
    epsilonEqualsScalar(k: number, e: number) {
        return epsilonEqualsScalar(this, k, e);
    }

    /**
     * Returns a string representation of this IndexTuple.
     */
    toString() {
        return toString(this);
    }
}

/**
 * A IndexTuple backed by a Uint16Array.
 */
export class Struct extends Structure<Uint16Array> {
    static create(other: IndexTuple) {
        let IndexTuple = new Struct();
        IndexTuple.set(other);
        return IndexTuple;
    }

    static create$(first: number, second: number, third: number) {
        let IndexTuple = new Struct();
        IndexTuple.set$(first, second, third);
        return IndexTuple;
    }

    /**
     * Creates a IndexTuple struct.
     */
    constructor() {
        super(new Uint16Array(3));
    }

    /**
     * The index of the first triangle vertex.
     */
    get first() {
        return this.data[0];
    }

    /**
     * The index of the first triangle vertex.
     */
    set first(value: number) {
        this.data[0] = value;
    }

    /**
     * The index of the second triangle vertex.
     */
    get second() {
        return this.data[1];
    }

    /**
     * The index of the second triangle vertex.
     */
    set second(value: number) {
        this.data[1] = value;
    }

    /**
     * The index of the third triangle vertex.
     */
    get third() {
        return this.data[2];
    }

    /**
     * The index of the third triangle vertex.
     */
    set third(value: number) {
        this.data[2] = value;
    }

    /**
     * Sets each component of this IndexTuple to that of the other IndexTuple.
     */
    set(other: IndexTuple) {
        return set(this, other);
    }

    /**
     * Sets each component of this IndexTuple.
     */
    set$(first: number, second: number, third: number) {
        return set$(this, first, second, third);
    }

    /**
     * Adds the other IndexTuple to this IndexTuple componentwise.
     */
    add(other: IndexTuple) {
        return add(this, other);
    }

    /**
     * Adds the specified values to this IndexTuple componentwise.
     */
    add$(first: number, second: number, third: number) {
        return add$(this, first, second, third);
    }

    /**
     * Subtracts the other IndexTuple from this IndexTuple componentwise.
     */
    subtract(other: IndexTuple) {
        return subtract(this, other);
    }

    /**
     * Subtracts the specified values from this IndexTuple componentwise.
     */
    subtract$(first: number, second: number, third: number) {
        return subtract$(this, first, second, third);
    }

    /**
     * Multiplies each component of this IndexTuple by the specified scalar.
     */
    mulScalar(k: number) {
        return mulScalar(this, k);
    }

    /**
     * Divides each component of this IndexTuple by the specified scalar.
     */
    divScalar(k: number) {
        return divScalar(this, k);
    }

    /**
     * Checks if each component of this IndexTuple is equal to that of the other IndexTuple.
     */
    equals(other: IndexTuple) {
        return equals(this, other);
    }

    /**
     * Checks if each component of this IndexTuple is equal to the specified scalar.
     */
    equalsScalar(k: number) {
        return equalsScalar(this, k);
    }

    /**
     * Checks if each component of this IndexTuple is approximately equal to that of the other IndexTuple.
     */
    epsilonEquals(other: IndexTuple, e: number) {
        return epsilonEquals(this, other, e);
    }

    /**
     * Checks if each component of this IndexTuple is approximately equal to the specified scalar.
     */
    epsilonEqualsScalar(k: number, e: number) {
        return epsilonEqualsScalar(this, k, e);
    }

    /**
     * Returns a string representation of this IndexTuple.
     */
    toString() {
        return toString(this);
    }
}

/**
 * A IndexTuple buffer backed by a Uint16Array.
 */
export class Buf extends StructureBuffer<Uint16Array> {
    /**
     * Creates an empty IndexTuple buffer with the specified IndexTuple capacity.
     */
    static create(capacity: number) {
        return new Buf(new Uint16Array(capacity * 3));
    }

    /**
     * The index of the first triangle vertex.
     */
    get first() {
        return this.data[this.dataPosition + 0];
    }

    /**
     * The index of the first triangle vertex.
     */
    set first(value: number) {
        this.data[this.dataPosition + 0] = value;
    }

    /**
     * The index of the second triangle vertex.
     */
    get second() {
        return this.data[this.dataPosition + 1];
    }

    /**
     * The index of the second triangle vertex.
     */
    set second(value: number) {
        this.data[this.dataPosition + 1] = value;
    }

    /**
     * The index of the third triangle vertex.
     */
    get third() {
        return this.data[this.dataPosition + 2];
    }

    /**
     * The index of the third triangle vertex.
     */
    set third(value: number) {
        this.data[this.dataPosition + 2] = value;
    }

    /**
     * Gets the number of components in a IndexTuple, namely 3.
     */
    structLength() {
        return 3;
    }

    /**
     * Sets each component of the IndexTuple at the specified position.
     */
    set$(position: number, first: number, second: number, third: number) {
        let dataPos = position * this.structLength();
        this.data[dataPos++] = first;
        this.data[dataPos++] = second;
        this.data[dataPos++] = third;
    }

    /**
     * Sets each component of the current IndexTuple, then moves to the next position of this buffer.
     */
    put$(first: number, second: number, third: number) {
        this.data[this.dataPosition++] = first;
        this.data[this.dataPosition++] = second;
        this.data[this.dataPosition++] = third;
    }

    /**
     * Sets each component of the current IndexTuple to that of the other IndexTuple.
     */
    $set(other: IndexTuple) {
        return set(this, other);
    }

    /**
     * Sets each component of the current IndexTuple.
     */
    $set$(first: number, second: number, third: number) {
        return set$(this, first, second, third);
    }

    /**
     * Adds the other IndexTuple to the current IndexTuple componentwise.
     */
    $add(other: IndexTuple) {
        return add(this, other);
    }

    /**
     * Adds the specified values to the current IndexTuple componentwise.
     */
    $add$(first: number, second: number, third: number) {
        return add$(this, first, second, third);
    }

    /**
     * Subtracts the other IndexTuple from the current IndexTuple componentwise.
     */
    $subtract(other: IndexTuple) {
        return subtract(this, other);
    }

    /**
     * Subtracts the specified values from the current IndexTuple componentwise.
     */
    $subtract$(first: number, second: number, third: number) {
        return subtract$(this, first, second, third);
    }

    /**
     * Multiplies each component of the current IndexTuple by the specified scalar.
     */
    $mulScalar(k: number) {
        return mulScalar(this, k);
    }

    /**
     * Divides each component of the current IndexTuple by the specified scalar.
     */
    $divScalar(k: number) {
        return divScalar(this, k);
    }

    /**
     * Checks if each component of the current IndexTuple is equal to that of the other IndexTuple.
     */
    $equals(other: IndexTuple) {
        return equals(this, other);
    }

    /**
     * Checks if each component of the current IndexTuple is equal to the specified scalar.
     */
    $equalsScalar(k: number) {
        return equalsScalar(this, k);
    }

    /**
     * Checks if each component of the current IndexTuple is approximately equal to that of the other IndexTuple.
     */
    $epsilonEquals(other: IndexTuple, e: number) {
        return epsilonEquals(this, other, e);
    }

    /**
     * Checks if each component of the current IndexTuple is approximately equal to the specified scalar.
     */
    $epsilonEqualsScalar(k: number, e: number) {
        return epsilonEqualsScalar(this, k, e);
    }

    /**
     * Returns a string representation of the current IndexTuple.
     */
    $toString() {
        return toString(this);
    }
}
