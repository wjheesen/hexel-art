{"version":3,"sources":["webpack://hexel-art/../glib/src/buffer/color-buffer.ts","webpack://hexel-art/../glib/src/buffer/mat2d-buffer.ts","webpack://hexel-art/../glib/src/buffer/struct-buffer.ts","webpack://hexel-art/../glib/src/buffer/vec2-buffer.ts","webpack://hexel-art/../glib/src/event/pointer-event.ts","webpack://hexel-art/../glib/src/event/wheel-event.ts","webpack://hexel-art/../glib/src/index.ts","webpack://hexel-art/../glib/src/model/ellipse-model.ts","webpack://hexel-art/../glib/src/model/mesh.ts","webpack://hexel-art/../glib/src/model/model.ts","webpack://hexel-art/../glib/src/model/polygon-mesh.ts","webpack://hexel-art/../glib/src/model/polygon-model.ts","webpack://hexel-art/../glib/src/program/ellipse-program.ts","webpack://hexel-art/../glib/src/program/fill-program.ts","webpack://hexel-art/../glib/src/program/program-util.ts","webpack://hexel-art/../glib/src/program/program.ts","webpack://hexel-art/../glib/src/rendering/camera.ts","webpack://hexel-art/../glib/src/rendering/renderer.ts","webpack://hexel-art/../glib/src/rendering/surface.ts","webpack://hexel-art/../glib/src/shader/ellipse.ts","webpack://hexel-art/../glib/src/shader/fill.ts","webpack://hexel-art/../glib/src/struct/color.ts","webpack://hexel-art/../glib/src/struct/colorf.ts","webpack://hexel-art/../glib/src/struct/ellipse.ts","webpack://hexel-art/../glib/src/struct/line-segment.ts","webpack://hexel-art/../glib/src/struct/mat2d.ts","webpack://hexel-art/../glib/src/struct/mat4.ts","webpack://hexel-art/../glib/src/struct/point.ts","webpack://hexel-art/../glib/src/struct/rect.ts","webpack://hexel-art/../glib/src/struct/util.ts","webpack://hexel-art/../glib/src/struct/vec2.ts","webpack://hexel-art/../glib/src/tool/pan-tool.ts","webpack://hexel-art/../glib/src/tool/pinch-zoom-tool.ts","webpack://hexel-art/../glib/src/tool/stroke.ts","webpack://hexel-art/../glib/src/tool/wheel-zoom-tool.ts","webpack://hexel-art/./src/hexel/scene.ts","webpack://hexel-art/./src/index.ts","webpack://hexel-art/webpack/bootstrap","webpack://hexel-art/webpack/startup"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { Color, StructBuffer } from '..';\nimport { TypedArray } from './typed-array';\n\nexport type ColorfBuffer = ColorBuffer<Float32Array>;\n\nexport class ColorBuffer<T extends TypedArray> extends StructBuffer<T, Color.Like> implements Color.Like {\n\n    /** Creates a color buffer large enough to hold the specified number of colors. */\n    static withLength(n: number) {\n        return new this(new Uint8Array(n * 4));\n    }\n\n    get componentLength() {\n        return 4;\n    }\n\n    get r() { \n        return this.getComponent(0);\n    }\n\n    set r(value: number) {\n        this.setComponent(0, value);\n    }\n\n    get g() { \n        return this.getComponent(1);\n    }\n\n    set g(value: number) {\n        this.setComponent(1, value);\n    }\n\n    get b() { \n        return this.getComponent(2);\n    }\n\n    set b(value: number) {\n        this.setComponent(2, value);\n    }\n\n    get a() { \n        return this.getComponent(3);\n    }\n\n    set a(value: number) {\n        this.setComponent(3, value);\n    }\n\n    protected newStruct(data: T): Color.Like {\n        return new ColorBuffer(data);\n    }\n} \n","import { Mat2d, StructBuffer } from '..';\n\nexport class Mat2dBuffer extends StructBuffer<Float32Array, Mat2d.Like> implements Mat2d.Like {\n\n    /** Creates a mat2d buffer large enough to hold the specified number of mat2ds. */\n    static withLength(n: number) {\n        return new this(new Float32Array(n * 6));\n    }\n\n    get componentLength() {\n        return 6;\n    }\n\n    get c1r1() { \n        return this.getComponent(0);\n    }\n\n    set c1r1(value: number) {\n        this.setComponent(0, value);\n    }\n\n    get c1r2() { \n        return this.getComponent(1);\n    }\n\n    set c1r2(value: number) {\n        this.setComponent(1, value);\n    }\n\n    get c2r1() { \n        return this.getComponent(2);\n    }\n\n    set c2r1(value: number) {\n        this.setComponent(2, value);\n    }\n\n    get c2r2() { \n        return this.getComponent(3);\n    }\n\n    set c2r2(value: number) {\n        this.setComponent(3, value);\n    }\n\n    get c3r1() { \n        return this.getComponent(4);\n    }\n\n    set c3r1(value: number) {\n        this.setComponent(4, value);\n    }\n\n    get c3r2() { \n        return this.getComponent(5);\n    }\n\n    set c3r2(value: number) {\n        this.setComponent(5, value);\n    }\n\n    protected newStruct(data: Float32Array): Mat2d.Like {\n        return new Mat2dBuffer(data);\n    }\n} \n","import { TypedArray } from \"..\";\n\n\nexport abstract class StructBuffer<T extends TypedArray, S> {\n\n    private dataPosition = 0;\n\n    constructor(  \n        /** The primitive array data backing the Structs in this buffer.*/\n        public readonly data: T,\n    ) {}\n\n    /** The current position of this buffer */\n    get position() {\n        return this.dataPosition / this.componentLength;\n    }\n\n    set position(index: number) {\n        this.assertValidIndex(index);\n        this.dataPosition = index * this.componentLength;\n    }\n\n    private assertValidIndex(index: number) {\n        if (index < 0 || index >= this.length) {\n            throw \"Index \" + index + \" is out of bounds\";\n        }\n    }\n\n    /** @returns this buffer positioned at the specified index */\n    at(index: number): this {\n        this.position = index;\n        return this;\n    }\n\n    /** The number of structs in this buffer */\n    get length() {\n        return this.data.length / this.componentLength;\n    }\n\n    /** The number of components making up each struct. */\n    abstract get componentLength();\n\n    protected getComponent(index: number) {\n        return this.data[this.dataPosition + index];\n    }\n\n    protected setComponent(index: number, value: number) {\n        return this.data[this.dataPosition + index] = value;\n    }\n\n    /** Gets the struct at the specified index. */\n    get(index: number): S {\n        this.assertValidIndex(index);\n        let data = this.getStructData(index);\n        return this.newStruct(data);\n    }\n\n    protected abstract newStruct(data: T): S\n\n    private getStructData(index: number) {\n        let begin = index * this.componentLength;\n        let end = begin + this.componentLength;\n        return <T> this.data.subarray(begin, end);\n    }\n}","import { Point, Vec2, StructBuffer, Rect } from '..';\n\nexport class Vec2Buffer extends StructBuffer<Float32Array, Vec2.Like> implements Vec2.Like {\n\n    /** Creates a vec2 buffer large enough to hold the specified number of vec2s. */\n    static withLength(n: number) {\n        return new this(new Float32Array(n * 2));\n    }\n\n    get componentLength() {\n        return 2;\n    }\n\n    get x() { \n        return this.getComponent(0);\n    }\n\n    set x(value: number) {\n        this.setComponent(0, value);\n    }\n\n    get y() {\n        return this.getComponent(1);\n    }\n\n    set y(value: number) {\n        this.setComponent(1, value);\n    }\n\n    get bounds(): Rect\n    {\n        return this.length == 0 ? Rect.empty() : this.measureBounds(this.at(0));\n    }\n\n    /** Algorithm used when buffer contains at least one point (p0) */\n    private measureBounds(p0: Point.Like)\n    {\n        let bounds = Rect.dimensions(p0.x, p0.y, 0, 0);\n        for (let i = 1; i < this.length; i++) {\n            bounds.unionPoint(this.at(i));\n        }\n        return bounds;\n    }\n\n    protected newStruct(data: Float32Array): Vec2.Like {\n        return new Vec2Buffer(data);\n    }\n\n    /**\n     * Checks if a polygon (specified by a subset of vertices in this buffer) contains the specified point.\n     * @param x the x coordinate of the point to check.\n     * @param y the y coordinate of the point to check.\n     * @param offset the offset of the first polygon vertex. Defaults to zero.\n     * @param count the number of polygon vertices. Defaults to the number of vertices in this buffer.\n     */\n    containsPoint(p: Point.Like, offset = 0, count = this.length - offset) {\n        // Assume the point is not inside the polygon\n        let inside = false;\n\n        // Check point against each side of the polygon \n        let {x: x1, y: y1} = this.at(offset + count - 1);\n        while(count-- > 0){\n            let {x: x2, y: y2 } = this.at(offset++);\n            if((y1 > p.y) !== (y2 > p.y) && p.x < (x2 - x1) * (p.y - y1) / (y2 - y1) + x1){\n                inside = !inside; \n            }\n            x1 = x2; y1 = y2;\n        }\n\n        return inside;\n    }\n}\n","import { Surface, Point } from '..';\n\nexport const enum PointerStatus {\n    Down, Move, Up, Cancel,\n}\n\nexport class Pointer {\n    constructor(\n        public readonly id: number,\n        public readonly status: PointerStatus,\n        public readonly surface: Surface,\n        public readonly position: Point.Like,\n        public readonly isPrimary: boolean,\n        public readonly isDown: boolean,\n        public readonly activePointers: Pointer[],\n    ) {}\n}\n\nexport class PointerEventListener {\n    wherePointer(p: Pointer) { return true; }\n    onPointerDown(p: Pointer) {}\n    onPointerMove(p: Pointer) {}\n    onPointerUp(p: Pointer) {}\n    onPointerCancel(p: Pointer) {}\n}\n\nexport class PointerEventDetector {\n\n    public readonly activePointers = <Pointer[]> [];\n    private listeners = <PointerEventListener[]> [];\n\n    constructor(\n        private surface: Surface\n    ) {}\n\n    startListening() {\n        let { canvasEl } = this.surface;\n        canvasEl.addEventListener('pointerdown', this.onPointerDown);\n        canvasEl.addEventListener('pointermove', this.onPointerMove);\n        canvasEl.addEventListener('pointerup', this.onPointerUp);\n        canvasEl.addEventListener('pointercancel', this.onPointerCancel);\n    }\n\n    stopListening() {\n        let { canvasEl } = this.surface;\n        canvasEl.removeEventListener('pointerdown', this.onPointerDown);\n        canvasEl.removeEventListener('pointermove', this.onPointerMove);\n        canvasEl.removeEventListener('pointerup', this.onPointerUp);\n        canvasEl.removeEventListener('pointercancel', this.onPointerCancel);\n    }\n\n    addListener(listener: PointerEventListener) {\n        this.listeners.push(listener);\n    }\n\n    private onPointerDown = (e: PointerEvent) => {\n        let pointer = this.addPointer(e, PointerStatus.Down);\n        this.dispatchEvent(pointer, l => l.onPointerDown(pointer));\n    }\n\n    private onPointerMove = (e: PointerEvent) => {\n        let pointer = this.addPointer(e, PointerStatus.Move);\n        this.dispatchEvent(pointer, l => l.onPointerMove(pointer));\n    }\n  \n    private onPointerUp = (e: PointerEvent) => {\n        let pointer = this.addPointer(e, PointerStatus.Up);\n        this.dispatchEvent(pointer, l => l.onPointerUp(pointer));\n        this.removePointer(pointer);\n    }\n\n    private onPointerCancel = (e: PointerEvent) => {\n        let pointer = this.addPointer(e, PointerStatus.Up);\n        this.dispatchEvent(pointer, l => l.onPointerCancel(pointer));\n        this.removePointer(pointer);\n    }\n\n    private dispatchEvent(p: Pointer, invokeFn: (listener: PointerEventListener) => any) {\n        this.listeners.filter(l => l.wherePointer(p)).forEach(invokeFn);\n    }\n\n    private addPointer(e: PointerEvent, status: PointerStatus) {\n        let index = this.getPointerIndex(e.pointerId);\n        let isDown = status == PointerStatus.Down || !!this.activePointers[index]?.isDown;\n        let pointer = this.newPointer(e, status, isDown);\n        this.surface.canvasEl.setPointerCapture(pointer.id);\n        this.activePointers[index] = pointer;\n        return pointer;\n    }\n\n    private newPointer(e: PointerEvent, status: PointerStatus, isDown: boolean) {\n        return new Pointer(\n            e.pointerId, status, this.surface, \n            this.surface.mapScreenPointToWorld(e),\n            e.isPrimary, isDown, this.activePointers\n        );\n    }\n\n    private getPointerIndex(pointerId: number): number {\n        for (let i = 0; i < this.activePointers.length; i++) {\n            if (this.activePointers[i].id == pointerId) {\n                return i;\n            }\n        }\n        return this.activePointers.length;\n    }\n\n    private removePointer(pointer: Pointer) {\n        this.surface.canvasEl.releasePointerCapture(pointer.id);\n        this.activePointers.splice(this.getPointerIndex(pointer.id), 1);\n    }\n}","import { Surface, Point } from '..';\n\nexport const enum WheelStatus {\n    Down, Move, Up, Cancel,\n}\n\nexport class Wheel {\n    constructor(\n        public readonly deltaY,\n        public readonly surface: Surface,\n        public readonly position: Point.Like,\n    ) {}\n}\n\nexport interface WheelEventListener {\n    onWheel(w: Wheel);\n}\n\nexport class WheelEventDetector {\n\n    private listeners = <WheelEventListener[]> [];\n\n    constructor(\n        private surface: Surface\n    ) {}\n\n    startListening() {\n        this.surface.canvasEl.addEventListener('wheel', this.onWheel);\n    }\n\n    stopListening() {\n        this.surface.canvasEl.removeEventListener('wheel', this.onWheel);\n    }\n\n    addListener(listener: WheelEventListener) {\n        this.listeners.push(listener);\n    }\n\n    private onWheel = (e: WheelEvent) => {\n        e.preventDefault(); // TODO: maybe only prevent default if the onWheel function returns true?\n        let wheel = new Wheel(e.deltaY, this.surface, this.surface.mapScreenPointToWorld(e));\n        this.listeners.forEach(l => l.onWheel(wheel));\n    }\n}","export * as Color from './struct/color';\nexport * as ColorF from './struct/colorf';\nexport * as Ellipse from './struct/ellipse';\nexport * from './struct/line-segment';\nexport * as Mat2d from './struct/mat2d';\nexport * as Point from './struct/point';\nexport * from './struct/rect';\nexport * as Vec2 from './struct/vec2';\nexport * as Mat4 from './struct/mat4';\nexport * from './buffer/struct-buffer';\nexport * from './buffer/color-buffer';\nexport * from './buffer/mat2d-buffer';\nexport * from './buffer/typed-array';\nexport * from './buffer/vec2-buffer';\nexport * from './drawable/drawable';\nexport * from './model/mesh';\nexport * from './model/polygon-mesh';\nexport * from './program/program-util';\nexport * from './program/program';\nexport * from './program/fill-program';\nexport * from './model/model';\nexport * from './model/polygon-model';\nexport * from './model/ellipse-model';\nexport * from './event/screen-point';\nexport * from './rendering/camera';\nexport * from './rendering/renderer';\nexport * from './rendering/surface';\nexport * from './event/pointer-event';\nexport * from './event/wheel-event';\nexport * from './tool/stroke';\nexport * from './tool/wheel-zoom-tool';\nexport * from './tool/pan-tool';\nexport * from './tool/pinch-zoom-tool';","import { Mat2d, Rect, Renderer, PolygonModel, Point, Vec2 } from '..';\nimport { EllipseProgram } from '../program/ellipse-program';\n\nexport class EllipseModel extends PolygonModel {\n\n    /**\n     * Measures the boundaries of a unit circle transformed to an ellipse by the specified matrix.\n     * @param matrix the transformation matrix.\n     */\n    static measureBoundaries(matrix: Mat2d.Like): Rect {\n        // Performs singular value decomposition of the model matrix to extract\n        // (1) The length of the semi-x axis (sx), which is equal to the first singular value in the Sigma matrix\n        // (2) The length of the semi-y axis (sy), which is equal to the second singular value in the Sigma matrix\n        // (3) The rotation angle (phi), from -PI/2 to PI/2, which is equal to the angle used to form the U matrix\n        // Boundaries are then meausure with the formula:\n        // x = (sx)^2 * (cos(phi)^2) + (sy)^2*(sin(phi)^2)\n        // y = (sx)^2 * (sin(phi)^2) + (sy)^2*(cos(phi)^2)\n        // left = tx - x, right = tx + x, bottom = ty - y, top = ty + y\n        let { c1r1: a, c2r1: b, c3r1: tx, c1r2: c, c2r2: d, c3r2: ty } = matrix;\n\n        // Helper variables:\n        let a2 = a*a;\n        let b2 = b*b;\n        let c2 = c*c;\n        let d2 = d*d;\n        let m = a*c + b*d;\n        let n = a2 + b2 - c2 - d2;\n\n        // Cos and sin of angle squared:\n        let phi = 0.5 * Math.atan2(2*m, n);\n        let cos2 = Math.pow(Math.cos(phi), 2);\n        let sin2 = Math.pow(Math.sin(phi), 2);\n\n        // Length of axes squared:\n        let s1 = a2 + b2 + c2 + d2;\n        let s2 = Math.sqrt(n*n + 4*m*m);\n        let sx2 = 0.5 * (s1 + s2);\n        let sy2 = 0.5 * (s1 - s2);\n\n        // Boundaries:\n        let x = Math.sqrt(sx2*cos2 + sy2*sin2);\n        let y = Math.sqrt(sx2*sin2 + sy2*cos2);\n        return Rect.copy({ \n            left: tx - x, right: tx + x, \n            top: ty + y, bottom: ty - y \n        });\n    }\n\n    constructor(matrix?: Mat2d.Like) {\n        super(EllipseProgram.mesh, matrix);\n    }\n\n    get bounds(): Rect {\n        return EllipseModel.measureBoundaries(this.matrix);\n    }\n\n    set bounds(dst: Rect) { // Preserves orientation\n        this.transform(Mat2d.rectToRect(this.bounds, dst));\n    }\n\n    /** Checks if this ellipse contains the specified point. */\n    contains(p: Point.Like) {\n        let modelPoint = this.mapPointToModelSpace(p);\n        if(this.mesh.bounds.containsPoint(modelPoint)){\n            return Vec2.length2(modelPoint) <= 1;\n        } \n        return false;\n    }\n}\n","import { Point, Rect, Vec2, Vec2Buffer } from \"..\";\n\n/** Stores static vertex and index data that multiple graphics can share. */\nexport abstract class Mesh {\n\n    public readonly bounds = this.vertices.bounds;\n\n    public miters?: Vec2Buffer;\n\n    /** The byte offset of this mesh's vertex data in a vertex buffer (if any). */\n    public vertexBufferOffset?: number;\n\n    /** The byte offset of this mesh's index data in an element buffer (if any). */\n    public indexBufferOffset?: number;\n\n    /** The byte offset of this mesh's stroke vertex data in a vertex buffer (if any). */\n    public strokeVertexBufferOffset?: number;\n\n    /** The byte offset of this mesh's stroke index data in an element buffer (if any). */\n    public strokeIndexBufferOffset?: number;\n\n    /** The number of indices used to render the stroke (if any). */\n    public strokeIndexCount?: number;\n\n    /** The byte offset of this mesh's miter data in an element buffer (if any). */\n    public miterBufferOffset?: number;\n\n    constructor(\n        /** Vertices in model space, centered at the origin */\n        public readonly vertices: Vec2Buffer,\n        /** Triangle indices for this mesh */\n        public readonly indices?: Uint16Array,\n    ) {}\n\n    /** Checks if this mesh contains the specified point */\n    abstract containsPoint(p: Point.Like): boolean;\n}","import { Drawable, Mat2d, Point, Rect, Vec2, Renderer } from \"..\";\n\n/** A graphic that can be transformed by altering its 2d model matrix. */\nexport abstract class Model {\n\n    constructor(\n        /** 2d matrix that maps this graphic from model space to world space. */\n        public readonly matrix: Mat2d.Like\n    ) {}\n\n    /** \n     * Measures the position of this graphic's center point in world space. \n     * Assumes the model for the graphic is centered at the origin.\n     **/\n    get center(): Point.Like {\n        return { x: this.matrix.c3r1, y: this.matrix.c3r2 };\n    }\n\n    /**\n     * Centers this graphic at the specified point in world space.\n     * Assumes the model for the graphic is centered at the origin.\n     */\n    set center({x, y}: Point.Like) {\n        this.matrix.c3r1 = x;\n        this.matrix.c3r2 = y;\n    }\n\n    /** Measures the boundaries of this graphic in world space. */\n    abstract get bounds(): Rect;\n\n    /** Converts a point in this graphic's model space to a point in world space. */\n    mapPointToWorldSpace(modelPoint: Point.Like, out = <Point.Like> {}) {\n        return Mat2d.mapPoint(this.matrix, modelPoint, out);\n    }\n\n    /** Converts a point in world space to a point in this graphic's model space. */\n    mapPointToModelSpace(worldPoint: Point.Like, out = <Point.Like> {}){\n        return Mat2d.mapPoint(Mat2d.invert(this.matrix), worldPoint, out);\n    }\n\n    /** Checks if this graphic contains the specified point. */\n    abstract containsPoint(p: Point.Like): boolean;\n   \n    /** Transforms this graphic by the specified matrix. */\n    transform(m: Mat2d.Like) {\n        Mat2d.concat(m, this.matrix, this.matrix);\n    }\n\n    /** Translates this graphic by the specified vector. */\n    translate(v: Vec2.Like) {\n        this.transform(Mat2d.translate(v));\n    }\n\n    /** Scales this graphic by the specified vector, with a pivot point at its center.  */\n    scale(v: Vec2.Like){\n        this.transform(Mat2d.pivot(Mat2d.scale(v), this.center));\n    }\n\n    /** Stretches this graphic by the specified factor, with a pivot point at its center. */\n    stretch(factor: number){\n        this.transform(Mat2d.pivot(Mat2d.stretch(factor), this.center))\n    }\n\n    /** Rotates this graphic by the specified angle, with a pivot point at its center. */\n    rotate(radians: number){\n        this.transform(Mat2d.pivot(Mat2d.rotate(radians), this.center));\n    }\n}","import { Point, Mat2d, Vec2, Vec2Buffer, Mesh, Rect } from '..';\n\nexport class PolygonMesh extends Mesh {\n\n    static regularPolygon(n: number, flatTop = false) {\n        return new PolygonMesh(this.regularVertices(n, flatTop), this.regularIndices(n));\n    }\n\n    /**\n     * Generates the vertices for a regular polygon centered at (0,0).\n     * @param n how many sides the polygon should have.\n     * @param isFlatTopped whether the polygon is flat-topped (true) or pointy-topped (false). Defaults to false.\n     */\n    static regularVertices(n: number, flatTop = false) {\n        // Create a buffer large enough to hold the n vertices\n        let vertices = Vec2Buffer.withLength(n);\n        // Create a matrix to rotate from vertex to vertex\n        let angle = 2 * Math.PI / n;\n        let rotation = Mat2d.rotate(angle)\n        // Begin with the vertex (0,1), rotating for flat top polygon if requested\n        let v = vertices.get(0); v.y = 1;\n        if (flatTop) {\n            Mat2d.mapPoint(Mat2d.rotate(angle / 2), v, v);\n        }\n        // Keep rotating the point and adding to buffer till it is full\n        for (let i = 1; i < n; i++) {\n            Mat2d.mapPoint(rotation, vertices.get(i - 1), vertices.at(i));\n        }\n        return vertices;\n    }\n\n    /**\n     * Generates the indices for a regular polygon with n sides.\n     * The resulting index array will have have 3*(n-2) indices.\n     * @param n how many sides the mesh should have.\n     */\n    static regularIndices(n: number) {\n        let indices = new Uint16Array(3 * (n - 2));\n        for (let i = 0; i < n; i++) {\n            indices[3 * i + 1] = i + 1;\n            indices[3 * i + 2] = i + 2;\n        }\n        return indices;\n    }\n\n    /**\n     * Creates the mesh for a rectangle\n     * @param id an optional id for the mesh.\n     */\n    static rectangle(r: Rect) {\n        let vertices = PolygonMesh.rectangleVertices(r);\n        let indices = PolygonMesh.regularIndices(4);\n        return new PolygonMesh(vertices, indices);\n    }\n\n    /**\n      * Extracts the vertices from the specified rect into a new vertex buffer.\n      * @param rect the rect from which to extract the vertices.\n      */\n    static rectangleVertices(r: Rect) {\n        let vertices = Vec2Buffer.withLength(4);\n        r.topLeft(vertices.at(0));\n        r.bottomLeft(vertices.at(1));\n        r.bottomRight(vertices.at(2));\n        r.topRight(vertices.at(3));\n        return vertices;\n    }\n\n    /**\n     * Creates the mesh for a star with n points and the specified inner and outer radii.\n     * @param n how many points the star should have.\n     * @param ratio ratio of the inner radius to the outer radius.\n     */\n    static star(n: number, ratio: number) {\n        let vertices = PolygonMesh.starVertices(n, ratio);\n        let indices = PolygonMesh.starIndices(n);\n        return new PolygonMesh(vertices, indices);\n    }\n\n    /**\n     * Generates the vertices for a star centered at (0,0).\n     * @param points how many points the star should have.\n     * @param ratio ratio of the inner radius to the outer radius.\n     */\n    static starVertices(points: number, ratio: number) {\n        // Create vertex buffer big enough to hold the n inner vertices and n outer vertices\n        let vertices = Vec2Buffer.withLength(points + points);\n        // Calculate the rotation angle\n        let angle = 2 * Math.PI / points;\n        let rotation = Mat2d.rotate(angle);\n        // Start with (0, 1) as the outer vertex\n        vertices.y = 1;\n        // Scale by the specified ratio and rotate by half the angle to get the first inner vertex\n        Mat2d.mapPoint(Mat2d.rotate(0.5 * angle), { x: 0, y: ratio }, vertices.at(1));\n        // Keep rotating the inner and outer vertices and adding them to the buffer until it is full.\n        for (let i = 2; i < vertices.length; i++) {\n            Mat2d.mapPoint(rotation, vertices.get(i - 2), vertices.at(i));\n        }\n        return vertices;\n    }\n\n    /**\n     * Generates the indices for a star with n points.\n     * The star will have 3*(n-2) inner indices and 3n outer indices.\n     * @param n how many points the star should have.\n     */\n    static starIndices(n: number) {\n        // Create an array big enough to hold all the indices\n        let innerIndexCount = 3 * (n - 2);\n        let outerIndexCount = 3 * n;\n        let indices = new Uint16Array(innerIndexCount + outerIndexCount);\n        // Compute inner indices and add to array\n        let first = 1, second = 3, third = 5;\n        for (let i = 0; i < innerIndexCount; second += 2, third += 2) {\n            indices[i++] = first;\n            indices[i++] = second;\n            indices[i++] = third;\n        }\n        // Computer outer indices and add to array\n        first = 2 * n - 1; second = 0; third = 1;\n        for (let i = 0; i < outerIndexCount; i++, first = third++, second = third++) {\n            indices[i++] = first;\n            indices[i++] = second;\n            indices[i++] = third;\n        }\n        // Return the indices\n        return indices;\n    }\n\n    static miters(vertices: Vec2Buffer){\n        let length = vertices.length, lastIndex = length - 1;\n        let miters = Vec2Buffer.withLength(length);\n        let prev = Vec2.copy(vertices.at(lastIndex));\n        let curr = Vec2.copy(vertices.at(0));\n        let line1 = Vec2.fromPointToPoint(prev, curr);\n        let line2 = <Vec2.Like> {};\n        for (let i = 0; i < length; i++) {\n            Vec2.copy(curr, prev);\n            Vec2.copy(vertices.at((i + 1) % lastIndex), curr);\n            Vec2.fromPointToPoint(prev, curr, line2);\n            Vec2.miter(line1, line2, 1, 3, miters.at(i));\n            Vec2.copy(line2, line1);\n        }\n        return miters;\n    }\n\n    public readonly miters = PolygonMesh.miters(this.vertices);\n\n    containsPoint(p: Point.Like): boolean {\n        return this.vertices.containsPoint(p);\n    }\n}\n\n","import { Model, Mesh, Mat2d, Rect, Point, LineSegment, Vec2 } from \"..\";\n\n/** Shape defined by matrix transformation of a mesh. */\nexport class PolygonModel extends Model {\n    \n    /**\n     * Creates a shape with the specified mesh data and initial transformation matrix.\n     * @param mesh the static vertex and index data data for this shape.\n     * @param matrix the initial transformation matrix. Defaults to identiy.\n     */\n    constructor(\n        public readonly mesh: Mesh, matrix = Mat2d.identity()){\n        super(matrix);\n    }\n\n    get bounds(): Rect {\n        let { vertices } = this.mesh;\n        let { x, y } = this.mapPointToWorldSpace(vertices.at(0));\n        let bounds = Rect.dimensions(x, y, 0, 0);\n        for (let i = 1; i < vertices.length; i++) {\n            bounds.unionPoint(this.mapPointToWorldSpace(vertices.at(i)));\n        }\n        return bounds;\n    }\n\n    set bounds(dst: Rect) { // Preserves orientation\n        this.transform(Mat2d.rectToRect(this.bounds, dst));\n    }\n\n    /** Get the position of the vertex at the specified index */\n    vertexAt(index: number, out = <Vec2.Like> {}) {\n        return this.mapPointToWorldSpace(this.mesh.vertices.at(index), out);\n    }\n\n    containsPoint(p: Point.Like): boolean {\n        return this.mesh.containsPoint(this.mapPointToModelSpace(p));\n    }\n\n    /** Scales this shape to fit inside the destination rect using the specified scale to fit option */\n    scaleToFit(dst: Rect, stf = Mat2d.ScaleToFit.Fill) {\n        Mat2d.rectToRect(this.mesh.bounds, dst, stf, this.matrix);\n    }\n\n    /** Stretch-rotates this shape across the specified line segment */\n    stretchAcross({p1, p2}: LineSegment) {\n        // Translate center top to p1\n        let b = this.mesh.bounds;\n        let cx = b.centerX;\n        let v = Vec2.fromPointToPoint({ x: cx, y: b.top }, p1);\n        let t = Mat2d.translate(v, this.matrix);\n        \n        // Stretch rotate from (translated) center bottom to p2, with pivot point at p1\n        let c = Mat2d.mapPoint(t, {x: cx, y: b.bottom});\n        let s = Mat2d.stretchRotateToPoint(c, p2, p1);\n        this.transform(s);\n    }\n}","import { ColorfBuffer, Mat2dBuffer, Program, ProgramUtil, PolygonMesh, Rect, Renderer } from '..';\nimport * as Shader from '../shader/ellipse'\n\n/** Program for rendering ellipses. */\nexport class EllipseProgram extends Program<Shader.Uniforms, Shader.Attributes> {\n\n    static readonly mesh = PolygonMesh.rectangle(Rect.dimensions(-1, 1, 2, 2));\n\n    private positionBuffer: WebGLBuffer;\n    private matrixBuffer: WebGLBuffer;\n\n    public fillColor: ColorfBuffer;\n    public strokeColor: ColorfBuffer;\n    public lineWidth: number;\n    \n    static create(util: ProgramUtil) {\n        let program = new EllipseProgram;\n        program.location = util.createProgramFromSources(Shader.vertex, Shader.fragment);\n        program.uniforms = util.getUniformLocationMap(program.location, Shader.uniformRenaming) as Shader.Uniforms;\n        program.attribs = util.getAttributeLocationMap(program.location, Shader.attributeRenaming) as Shader.Attributes;\n        program.positionBuffer = util.createArrayBuffer(EllipseProgram.mesh.vertices.data);\n        program.matrixBuffer = util.createBuffer();\n        return program;\n    }\n\n    onAttach({gl}: Renderer) {\n        let c1 = this.attribs.model;\n        let c2 = c1 + 1;\n        let c3 = this.attribs.offset;\n\n        // Enable blending (for transparency)\n        gl.enable(gl.BLEND);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n        gl.enableVertexAttribArray(this.attribs.position);\n        gl.vertexAttribPointer(this.attribs.position, 2, gl.FLOAT, false, 0, 0);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.matrixBuffer);\n\n        gl.enableVertexAttribArray(c1);\n        gl.enableVertexAttribArray(c2);\n        gl.enableVertexAttribArray(c3);\n\n        gl.vertexAttribDivisor(c1, 1);\n        gl.vertexAttribDivisor(c2, 1);\n        gl.vertexAttribDivisor(c3, 1);\n    }\n\n    onDetach({gl}: Renderer) {\n        let c1 = this.attribs.model;\n        let c2 = c1 + 1;\n        let c3 = this.attribs.offset;\n\n        gl.vertexAttribDivisor(c1, 0);\n        gl.vertexAttribDivisor(c2, 0);\n        gl.vertexAttribDivisor(c3, 0);       \n    }\n\n    draw(renderer: Renderer, matrices: Mat2dBuffer) {\n        let {gl, camera } = renderer;\n        renderer.useProgram(this);\n        this.loadProjection(gl, camera.matrix);\n        this.loadMatrices(gl, matrices);\n        this.loadFillColor(gl);\n        this.loadStrokeColor(gl);\n        this.loadLineWidth(gl);\n        gl.drawArraysInstanced(gl.TRIANGLE_FAN, 0, 4, matrices.length);\n    }\n\n    private loadProjection(gl: WebGLRenderingContext, projection: Float32Array) {\n        gl.uniformMatrix4fv(this.uniforms.projection, false, projection);\n    }\n\n    /** Sets the matrix for each ellipse instance.*/\n    private loadMatrices(gl: WebGLRenderingContext, matrices: Mat2dBuffer) {\n        // Note: assumes \n        // (1) matrix buffer is already bound\n        // (2) attrib arrays are already enabled\n        // (3) attrib divisors have already been specified\n        let c1 = this.attribs.model;\n        let c2 = c1 + 1;\n        let c3 = this.attribs.offset;\n        \n        // Load data into WebGL\n        gl.bufferData(gl.ARRAY_BUFFER, matrices.data, gl.DYNAMIC_DRAW);\n\n        // Set first column vector (part of mat2)\n        gl.vertexAttribPointer(c1, 2, gl.FLOAT, false, 24, 0);\n        \n        // Set second column vector (part of mat2)\n        gl.vertexAttribPointer(c2, 2, gl.FLOAT, false, 24, 8);\n\n        // Set third column vector (separate vec2)\n        gl.vertexAttribPointer(c3, 2, gl.FLOAT, false, 24, 16);\n    }\n\n    /** Loads the fill color for the ellipse batch into this program. */\n    private loadFillColor(gl: WebGLRenderingContext) {\n        gl.uniform4fv(this.uniforms.fillColor, this.fillColor.data);\n    }\n\n    /** Loads the stroke color for the ellipse batch into this program. */\n    private loadStrokeColor(gl: WebGLRenderingContext) {\n        gl.uniform4fv(this.uniforms.strokeColor, this.strokeColor.data);\n    }\n\n    /** Loads the width of the lines making up the stroke. */\n    private loadLineWidth(gl: WebGLRenderingContext) {\n        gl.uniform1f(this.uniforms.lineWidth, this.lineWidth);\n    }\n}","import { Program, ColorfBuffer, Mesh, Renderer, ProgramUtil, Mat2dBuffer, Vec2Buffer } from \"..\";\nimport * as Shader from '../shader/fill'\n\n/**  Program for rendering polygons filled with a uniform color. */\nexport class FillProgram extends Program<Shader.Uniforms, Shader.Attributes> {\n\n    public color: ColorfBuffer;\n\n    private indexBuffer: WebGLBuffer;\n    private positionBuffer: WebGLBuffer;\n    private matrixBuffer: WebGLBuffer;\n    private dynamicBuffer: WebGLBuffer;\n    \n    static create(util: ProgramUtil, meshes: Mesh[]) {\n        let program = new FillProgram;\n        program.location = util.createProgramFromSources(Shader.vertex, Shader.fragment);\n        program.uniforms = util.getUniformLocationMap(program.location, Shader.uniformRenaming) as Shader.Uniforms;\n        program.attribs = util.getAttributeLocationMap(program.location, Shader.attributeRenaming) as Shader.Attributes;\n        program.indexBuffer = util.createIndexBuffer(meshes);\n        program.positionBuffer = util.createVertexBuffer(meshes);\n        program.matrixBuffer = util.createBuffer();\n        program.dynamicBuffer = util.createBuffer();\n        return program;\n    }\n\n    onAttach({ gl }: Renderer) {\n        let column1 = this.attribs.model;\n        let column2 = column1 + 1;\n        let column3 = this.attribs.offset;\n\n        gl.enable(gl.BLEND);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n        gl.enableVertexAttribArray(this.attribs.position);\n\n        // Enable a separate array for each column of the 3x2 model matrix\n        gl.enableVertexAttribArray(column1);\n        gl.enableVertexAttribArray(column2); \n        gl.enableVertexAttribArray(column3);\n        \n        // Only change the model matrix when the instance changes\n        gl.vertexAttribDivisor(column1, 1); \n        gl.vertexAttribDivisor(column2, 1);\n        gl.vertexAttribDivisor(column3, 1);\n    }\n\n    onDetach({gl}: Renderer){\n        let column1 = this.attribs.model;\n        let column2 = column1 + 1;\n        let column3 = this.attribs.offset;\n\n        // Disable instancing of 3x2 model matrix (because it affects global state)\n        gl.vertexAttribDivisor(column1, 0);\n        gl.vertexAttribDivisor(column2, 0);\n        gl.vertexAttribDivisor(column3, 0);    \n    }\n\n    draw(renderer: Renderer, mesh: Mesh, matrices: Mat2dBuffer) {\n        let { gl } = renderer;\n        renderer.useProgram(this);\n        this.loadProjection(gl, renderer.camera.matrix);\n        this.loadColor(gl);\n        this.loadVertices(gl, mesh);\n        this.loadMatrices(gl, matrices);\n        if (mesh.indices) {\n            gl.drawElementsInstanced(gl.TRIANGLES, mesh.indices.length, gl.UNSIGNED_SHORT, mesh.indexBufferOffset, matrices.length)\n        } else {\n            gl.drawArraysInstanced(gl.TRIANGLES, 0, mesh.vertices.length, matrices.length);\n        }\n    }\n\n    drawTriangleStrip(renderer: Renderer, vertices: Vec2Buffer, matrices: Mat2dBuffer) {\n        let { gl } = renderer;\n        renderer.useProgram(this);\n        this.loadProjection(gl, renderer.camera.matrix);\n        this.loadColor(gl);\n        this.loadLineVertices(gl, vertices);\n        this.loadMatrices(gl, matrices);\n        gl.drawArraysInstanced(gl.TRIANGLE_STRIP, 0, vertices.length, matrices.length);\n    }\n\n    private loadProjection(gl: WebGLRenderingContext, projection: Float32Array) {\n        gl.uniformMatrix4fv(this.uniforms.projection, false, projection);\n    }\n\n    /** Loads the fill color into this program. */\n    private loadColor(gl: WebGLRenderingContext) {\n        gl.uniform4fv(this.uniforms.color, this.color.data);\n    }\n\n    private loadVertices(gl: WebGLRenderingContext, mesh: Mesh) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n        gl.vertexAttribPointer(this.attribs.position, 2, gl.FLOAT, false, 0, mesh.vertexBufferOffset);\n    }\n\n    private loadLineVertices(gl: WebGLRenderingContext, vertices: Vec2Buffer) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, vertices.data, gl.DYNAMIC_DRAW);\n        gl.vertexAttribPointer(this.attribs.position, 2, gl.FLOAT, false, 0, 0);\n    }\n\n    /** Sets the matrix for each ellipse instance.*/\n    private loadMatrices(gl: WebGLRenderingContext, matrices: Mat2dBuffer) {\n        let column1 = this.attribs.model;\n        let column2 = column1 + 1;\n        let column3 = this.attribs.offset;\n\n        // Load data into WebGL\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.matrixBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, matrices.data, gl.DYNAMIC_DRAW);\n\n        // Set each column of the 3x2 model matrix\n        gl.vertexAttribPointer(column1, 2, gl.FLOAT, false, 24, 0);\n        gl.vertexAttribPointer(column2, 2, gl.FLOAT, false, 24, 8);\n        gl.vertexAttribPointer(column3, 2, gl.FLOAT, false, 24, 16);\n    }\n}\n","import { AttributeLocationMap, UniformLocationMap, Mesh, TypedArray } from \"..\";\n\nexport type ArraySize = number | BufferSource;\nexport type ElementArraySize = number | ArrayBuffer | Uint8Array | Uint16Array;\n\n/** Maps the name of a uniform or attribute to it's minified renaming. */\nexport interface Renaming {\n    [key: string]: string;\n}\n\n/** Contains convenience functions for creating programs and loading data into them. */\nexport class ProgramUtil {\n\n    constructor(public gl: WebGLRenderingContext) { }\n\n    createBuffer() {\n        return this.gl.createBuffer();\n    }\n\n    /**\n     * Creates an array buffer with the specified size.\n     * @param size the size of the array buffer, or the initial data for the buffer.\n     * @param usage one of gl.STATIC_DRAW (often used, seldom changed), gl.DYNAMIC_DRAW (often used, often changed), or gl.STREAM_DRAW (seldom used).\n     */\n    createArrayBuffer(size: ArraySize, usage = this.gl.STATIC_DRAW) {\n        let gl = this.gl, buffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, <any>size, usage);\n        return buffer;\n    }\n\n    /**\n     * Creates an element buffer with the specified size.\n     * @param size the size of the element buffer, or the initial data for the buffer.\n     * @param usage one of gl.STATIC_DRAW (often used, seldom changed), gl.DYNAMIC_DRAW (often used, often changed), or gl.STREAM_DRAW (seldom used).\n     */\n    createElementBuffer(size: ElementArraySize, usage = this.gl.STATIC_DRAW) {\n        let gl = this.gl, buffer = gl.createBuffer();\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, <any>size, usage);\n        return buffer;\n    }\n\n    /** Packs mesh vertices into a single vertex buffer, saving the offsets. */\n    createVertexBuffer(meshes: Mesh[]) {\n        // Create an array buffer big enough to hold all the vertices\n        let gl = this.gl;\n        let size = this.sizeOfVertexBuffer(meshes);\n        let buffer = this.createArrayBuffer(size, gl.STATIC_DRAW);\n\n        // Pack the vertices into the buffer, saving the byte offsets\n        let offset = 0;\n        for (let mesh of meshes) {\n            let data = mesh.vertices.data;\n            gl.bufferSubData(gl.ARRAY_BUFFER, offset, data);\n            mesh.vertexBufferOffset = offset;\n            offset += data.byteLength;\n        }\n\n        return buffer;\n    }\n\n    private sizeOfVertexBuffer(meshes: Mesh[]) {\n        return meshes.reduce((total: number, mesh: Mesh) => total + mesh.vertices.data.byteLength, 0);\n    }\n\n    /** Packs mesh indices into a single buffer, saving the offsets. */\n    createIndexBuffer(meshes: Mesh[]) {\n\n        // Create an array buffer big enough to hold all the indices\n        let gl = this.gl;\n        let size = this.sizeOfIndexBuffer(meshes)\n        let buffer = this.createElementBuffer(size, gl.STATIC_DRAW);\n\n        // Pack the indices into the buffer, saving the byte offsets\n        let offset = 0;\n        for (let mesh of meshes) {\n            let data = mesh.indices;\n            gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, offset, data);\n            mesh.indexBufferOffset = offset;\n            offset += data.byteLength;\n        }\n\n        return buffer;\n    }\n\n    private sizeOfIndexBuffer(meshes: Mesh[]) {\n        return meshes.reduce((total: number, mesh: Mesh) => total + mesh.indices.byteLength, 0);\n    }\n\n    createMiterBuffer(meshes: Mesh[]) {\n        // Create an array buffer big enough to hold all the miters, including the \"zero\" miters used on the inner vertices\n        let gl = this.gl;\n        let size = this.sizeOfStrokeVertexBuffer(meshes);\n        let buffer = this.createArrayBuffer(size);\n\n        // Pack the vertices into the buffer, saving the byte offsets\n        let offset = 0;\n        let data: Float32Array;\n        for (let mesh of meshes) {\n            mesh.miterBufferOffset = offset;\n            offset += mesh.vertices.data.byteLength; // leave zeros for miters applied to inner vertices\n            data = mesh.miters.data;\n            gl.bufferSubData(gl.ARRAY_BUFFER, offset, data);\n            offset += data.byteLength; \n        }\n\n        return buffer;\n    }\n\n    createStrokeIndexBuffer(meshes: Mesh[]) {\n        // Ex: Let polygon p = [v0,v1,v2]\n        // -> indexCount =  2 * (p.length + 1) = 2 * 2 * (3 + 1) = 8\n        // -> indices = [[0,3], [1,4], [2,5], [0,3]]\n        // -> size = sizeof(short) * indexCount = 2 bytes * 8 = 16 bytes\n\n        // Create a Uint16Array big enough to hold all the indices\n        let indexCount = this.lengthOfStrokeIndexArray(meshes);\n        let indices = new Uint16Array(indexCount);\n        let position = 0;\n\n        for(let mesh of meshes){\n            let vertexCount = mesh.vertices.length; \n            mesh.strokeIndexCount = 2 * (vertexCount + 1);\n            mesh.strokeIndexBufferOffset = position * 2; // sizeof(short)\n            // Line to each point on path\n            for(let i = 0; i < vertexCount; i++){\n                indices[position++] = i + vertexCount;\n                indices[position++] = i;\n            }\n            // Close path\n            indices[position++] = vertexCount;\n            indices[position++] = 0;\n        }\n\n        return this.createElementBuffer(indices, this.gl.STATIC_DRAW);\n    }\n\n    private lengthOfStrokeIndexArray(meshes: Mesh[]) {\n        return meshes.reduce((total: number, mesh: Mesh) => total + (2 * (mesh.vertices.length + 1)), 0);\n    }\n\n    createStrokeVertexBuffer(meshes: Mesh[]){\n        // Create an array buffer big enough to hold all the vertices and all the miters\n        let gl = this.gl;\n        let size = this.sizeOfStrokeVertexBuffer(meshes);\n        let buffer = this.createArrayBuffer(size);\n\n        // Pack the vertices into the buffer, saving the byte offsets\n        let offset = 0;\n        for (let mesh of meshes) {\n            // Inner vertices (will be offset by a \"zero\" miter)\n            let data = mesh.vertices.data;\n            gl.bufferSubData(gl.ARRAY_BUFFER, offset, data);\n            mesh.strokeVertexBufferOffset = offset;\n            // Outer vertices (will be offset by miter)\n            offset += data.byteLength;\n            gl.bufferSubData(gl.ARRAY_BUFFER, offset, data);\n            offset += data.byteLength;\n        }\n\n        return buffer;\n    }\n\n    private sizeOfStrokeVertexBuffer(meshes: Mesh[]) {\n        let innerVertexSize = this.sizeOfStrokeVertexBuffer(meshes);\n        let outerVertexSize = meshes.reduce((total: number, m: Mesh) => total + m.miters.data.byteLength, 0);\n        return innerVertexSize + outerVertexSize;\n    }\n\n    /**\n     * Creates a program from 2 shaders.\n     * @param  vertexShaderSource string containing code for the vertex shader.\n     * @param  fragmentShaderSource string containing code for the fragment shader.\n     * @returns the program.\n     */\n    createProgramFromSources(vertexShaderSource: string, fragmentShaderSource: string) {\n        // Compile vertex and fragment shader\n        let vs = this.compileShader(vertexShaderSource, this.gl.VERTEX_SHADER);\n        let fs = this.compileShader(fragmentShaderSource, this.gl.FRAGMENT_SHADER);\n        // Create program and return\n        return this.createProgramFromShaders(vs, fs);\n    };\n\n    /**\n     * Creates a program from 2 shaders.\n     * @param  vertexShader a compiled vertex shader.\n     * @param  fragmentShader a compiled fragment shader.\n     * @returns the program.\n     */\n    createProgramFromShaders(vertexShader: WebGLShader, fragmentShader: WebGLShader) {\n        // create a program.\n        let gl = this.gl, program = gl.createProgram();\n\n        // attach the shaders.\n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n\n        // link the program.\n        gl.linkProgram(program);\n\n        // Check if it linked.\n        var success = gl.getProgramParameter(program, gl.LINK_STATUS);\n        if (!success) {\n            // something went wrong with the link\n            throw (\"program filed to link:\" + gl.getProgramInfoLog(program));\n        }\n\n        return program;\n    };\n\n    /**\n     * Creates and compiles a shader.\n     * @param shaderSource the GLSL source code for the shader.\n     * @param shaderType the type of shader, VERTEX_SHADER or FRAGMENT_SHADER.\n     * @returns the shader.\n     */\n    compileShader(shaderSource: string, shaderType: number) {\n        // Create the shader object\n        let gl = this.gl, shader = gl.createShader(shaderType);\n\n        // Set the shader source code.\n        gl.shaderSource(shader, shaderSource);\n\n        // Compile the shader\n        gl.compileShader(shader);\n\n        // Check if it compiled\n        var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n        if (!success) {\n            // Something went wrong during compilation; get the error\n            throw \"could not compile shader:\" + gl.getShaderInfoLog(shader);\n        }\n\n        return shader;\n    }\n\n    /** Gets the location of each of the uniforms associated with the specified program. */\n    getUniformLocationMap(program: WebGLProgram, renamed?: Renaming) {\n        let gl = this.gl, uniforms = <UniformLocationMap>{};\n        if (renamed) {\n            for (let name in renamed) {\n                uniforms[name] = gl.getUniformLocation(program, renamed[name]);\n            }\n        } else {\n            let count = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n            for (let i = 0; i < count; i++) {\n                let { name } = gl.getActiveUniform(program, i);\n                uniforms[name] = gl.getUniformLocation(program, name);\n            }\n        }\n        return uniforms;\n    }\n\n    /** Gets the location of each of the attributes associated with the specified program. */\n    getAttributeLocationMap(program: WebGLProgram, renamed?: Renaming) {\n        let gl = this.gl, attribs = <AttributeLocationMap>{};\n        if (renamed) {\n            for (let name in renamed) {\n                attribs[name] = gl.getAttribLocation(program, renamed[name]);\n            }\n        } else {\n            let count = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n            for (let i = 0; i < count; i++) {\n                let { name } = gl.getActiveAttrib(program, i);\n                attribs[name] = gl.getAttribLocation(program, name);\n            }\n        }\n        return attribs;\n    }\n}\n","import { Renderer } from '..';\n\n/** Maps the name of a uniform to its location in a WebGL program. */\nexport interface UniformLocationMap {\n    [key: string]: WebGLUniformLocation;\n}\n\n/** Maps the name of an attribute to its location in a WebGL program. */\nexport interface AttributeLocationMap {\n    [key: string]: number;\n}\n\nexport abstract class Program<U = UniformLocationMap, A = AttributeLocationMap> {\n\n    /** The location of this program in WebGL. */\n    location: WebGLProgram;\n\n    /** The locations of the uniforms associated with this program, keyed by the uniform name. */\n    uniforms: U;\n\n    /** The locations of the attributes associated with this program, keyed by the attribute name. */\n    attribs: A;\n\n    /** Called whenever this program is attached to the renderer. */\n    abstract onAttach(renderer: Renderer): any;\n\n    /** Called whenever this program is detached from the renderer. */\n    abstract onDetach(renderer: Renderer): any;\n}\n","import { Rect, Vec2, Mat4, Mat2d, Point } from '..';\n\n/** Defines an orthographic projection from world space to clip space. */\nexport class Camera {\n\n    /** The orthographic projection matrix that puts the world in view. */\n    public readonly matrix = new Float32Array(16);\n\n    /** The area of the world that is currently in view. */\n    public readonly view = Rect.copy(this.world);\n\n    /** The current position of the camera in relation to the center of the world. */\n    public readonly position = this.world.center();\n\n    /** The current zoom setting for this camera. */\n    public zoom = 1;\n\n    constructor(\n        /** The area that can be viewed by this camera */\n        public readonly world: Rect,\n        /** The min-allowed zoom setting for this camera. */\n        public readonly minZoom: number,\n        /** The max-allowed zoom setting for this camera. */\n        public readonly maxZoom: number\n    ) {}\n\n    /**\n     * Sets the size of the viewport in which the camera image will be displayed.\n     * The resulting image will be centered inside the viewport and will match the aspect of the camera. \n     * @param vw the new width of the viewport.\n     * @param vh the new height of the viewport.\n     */\n    setViewport(vw: number, vh: number) {\n        // Compute width to height ratio of viewport and world\n        let vr = vw / vh, wr = this.world.aspect;\n        // Scale width or height of view to match aspect of viewport\n        let m = Mat2d.scale(wr < vr ? {x: vr / wr, y: 1} : {x: 1, y: wr / vr});\n        // Apply our other camera settings on top\n        Mat2d.concat(Mat2d.stretch(1 / this.zoom), m, m);\n        Mat2d.concat(Mat2d.translate(this.position), m, m);\n        Mat2d.mapRect(m, this.world, this.view);\n        // Update matrix to reflect changes to view\n        this.updateMatrix();\n    }\n\n    /**\n     * Sends a request to offset this camera by the desired vector.\n     * Note: the desired offset may be adjusted to keep the camera from viewing anything outside of the world area.\n     * @param desiredOffset the desired offset. \n     * @returns the actual offset.\n     */\n    offset(desiredOffset: Vec2.Like) {\n        let target = Vec2.add(desiredOffset, this.position);\n        let ratio = (this.zoom - this.minZoom) / this.zoom;\n        let size = Mat2d.mapRect(Mat2d.stretch(ratio), this.world); // Max allowable size given zoom\n        let far = Rect.copy(size); far.offset(Vec2.rotate180(size.center())); // Center at origin so we know how far we can go in any direction\n\n        let actualOffset = Vec2.copy(desiredOffset);\n        // If world position is too far left\n        if (target.x < far.left) {\n            // Adjust offset so that offset.x + position.x = far.left\n            actualOffset.x = far.left - this.position.x;\n        }\n        // If world position is too far right\n        else if (target.x > far.right) {\n            // Adjust offset so that offset.x + position.x = far.right\n            actualOffset.x = far.right - this.position.x;\n        }\n        // If world position is too far down\n        if (target.y < far.bottom) {\n            // Adjust offset so that offset.y + position.y = far.bottom\n            actualOffset.y = far.bottom - this.position.y;\n        }\n        // If world position is too far up\n        else if (target.y > far.top) {\n            // Adjust offset so that offset.y + position.y = far.top\n            actualOffset.y = far.top - this.position.y;\n        }\n\n        // Now we can safely apply the offset\n        this.view.offset(actualOffset);\n        Vec2.add(this.position, actualOffset, this.position);\n        this.updateMatrix();\n        return actualOffset;\n    }\n\n    /**\n     * Sends a request to zoom in this camera by the desired scale factor.\n     * Note: the desired scale factor is automatically adjusted to keep the camera from viewing anything outside of the world area. \n     * @param desiredScaleFactor the desired scale factor.\n     * @returns the actual scale factor.\n     */\n    zoomIn(desiredScaleFactor: number) {\n        let targetZoom = this.zoom * desiredScaleFactor;\n        let actualScaleFactor: number;\n        if (targetZoom < this.minZoom) {\n            // Adjust scale factor so that zoom * changeInZoom = minZoom\n            actualScaleFactor = this.minZoom / this.zoom;\n            this.zoom = this.minZoom;\n        } else if (targetZoom > this.maxZoom) {\n            // Adjust scale factor so that zoom * changeInZoom = maxZoom\n            actualScaleFactor = this.maxZoom / this.zoom;\n            this.zoom = this.maxZoom;\n        } else {\n            // No need to adjust scale factor\n            actualScaleFactor = desiredScaleFactor;\n            this.zoom = targetZoom;\n        }\n        let m = Mat2d.pivot(Mat2d.stretch(1 / actualScaleFactor), this.position);\n        Mat2d.mapRect(m, this.view, this.view);\n        this.updateMatrix();\n        return actualScaleFactor;\n    }\n\n    /**\n     * Sends a request to zoom this camera by the desired scale factor.\n     * Note: the desired scale factor is automatically adjusted to keep the camera from viewing anything outside of the world area. \n     * @param desired the desired scale factor.\n     * @param focus the focus point. \n     * @returns the actual scale factor and offset.\n     */\n    zoomToPoint(desiredScaleFactor: number, focus: Point.Like) {\n        let view = this.view\n        // Convert (x,y) coordinates to [0,1] space\n        let normX = (focus.x - view.left) / view.width;\n        let normY = (focus.y - view.bottom) / view.height;\n        // Apply scale factor\n        let actualScaleFactor = this.zoomIn(desiredScaleFactor);\n        // Determine position of focus point after change in zoom\n        let aft: Vec2.Like = {\n            x: view.left + (normX * view.width),\n            y: view.bottom + (normY * view.height)\n        }\n        // Compute offset back to focus point\n        let offset = Vec2.fromPointToPoint(aft, focus);\n        // Apply the offset\n        let actualOffset = this.offset(offset);\n        // Return actual scale factor and offset so caller can check if they differ from desired\n        return {scale: actualScaleFactor, offset: actualOffset};\n    }\n\n    /** Recalculates the projection matrix to reflect changes in the camera settings.*/\n    private updateMatrix() {\n        Mat4.ortho(this.view, 0.1, 10, this.matrix);\n    }\n}","import { Camera, Program } from '..';\n\n/** Helper class for rendering graphics with WebGL. */\nexport class Renderer {\n\n    /** The location of the currently bound program. */\n    private currentProgram: Program;\n\n    constructor(\n        public readonly gl: WebGL2RenderingContext, \n        public readonly camera: Camera,\n    ) {}\n\n    /**\n     * Called whenever the canvas size changes.\n     * @param width the new width of the canvas.\n     * @param height the new height of the canvas.\n     */\n    onSurfaceChange(width: number, height: number) {\n        // Update the viewport to match the new dimensions of the drawing buffer\n        this.gl.viewport(0, 0, width, height);\n        // Adjust camera to viewport\n        this.camera.setViewport(width, height);\n    }\n\n    /** Binds the specified program to the WebGL rendering context, if not already bound. */\n    useProgram(program: Program) {\n        if (this.currentProgram !== program) {\n            this.attachProgram(program);\n        }\n    }\n\n    private attachProgram(program: Program) {\n        this.gl.useProgram(program.location);\n        // Notify detached program\n        if(this.currentProgram){ this.currentProgram.onDetach(this); }\n        // Notify attached program\n        program.onAttach(this);\n        // Keep track of the current program\n        this.currentProgram = program;\n    }\n};","import { Drawable, Point, Renderer, Rect, Vec2, ScreenPoint, PointerEventListener } from '..';\nimport { PointerEventDetector } from '../event/pointer-event';\nimport { WheelEventDetector } from '../event/wheel-event';\n\n/** A rendering surface linked to an HTMLCanvasElement (the drawing buffer). */\nexport class Surface {\n\n    /** The drawing buffer's bounding client rect. */\n    clientRect = this.canvasEl.getBoundingClientRect();\n\n    /*** True if a request has been made to re-render this surface. */\n    hasRenderRequest = false;\n\n    constructor(\n        public readonly canvasEl: HTMLCanvasElement, \n        public readonly renderer: Renderer,\n        public readonly scene: Drawable\n    ) {}\n\n    startRenderLoop() {\n        this.requestRender();\n        this.checkRender();\n    }\n\n    /** Checks each frame if the surface needs to be re-rendered. */\n    private checkRender = () => {\n        // Resize surface if necessary\n        this.resize()\n        // Notify surface of animation frame\n        this.onAnimationFrame()\n        // Keep calling this function every frame\n        requestAnimationFrame(this.checkRender);\n    }\n\n    /**\n     * Requests that this surface be re-rendered.\n     */\n    requestRender() {\n        this.hasRenderRequest = true;\n    }\n\n    /**\n     * Re-renders this surface if it has a render request.\n     */\n    onAnimationFrame() {\n        if(this.hasRenderRequest){\n            this.scene.draw(this.renderer);\n            this.hasRenderRequest = false;\n        }\n    }\n\n    /** Resizes this surface to match the specified width/height dimensions. */\n    resize(width = this.canvasEl.clientWidth, height = this.canvasEl.clientHeight) {\n        // If width or height has changed\n        if (this.canvasEl.width !== width || this.canvasEl.height !== height) {\n            // Resize canvas to specified dimensions\n            this.canvasEl.width = width;\n            this.canvasEl.height = height;\n            // Get new bounding box\n            this.clientRect = this.canvasEl.getBoundingClientRect();\n            // Notify renderer of surface change\n            this.renderer.onSurfaceChange(width, height);\n            // Request render to show changes\n            this.requestRender();\n        }\n    }\n\n    startDetectingPointerEvents() {\n        let detector = new PointerEventDetector(this);\n        detector.startListening();\n        return detector;\n    }\n\n    startDetectingWheelEvents() {\n        let detector = new WheelEventDetector(this);\n        detector.startListening();\n        return detector;\n    }\n\n    /** Sends a request to pan the image displayed by this surface. */\n    pan(desiredOffset: Vec2.Like) {\n        let camera = this.renderer.camera;\n        let actual = camera.offset(desiredOffset);\n        if (Vec2.length2(actual) != 0) {\n            this.requestRender();\n        }\n        return actual;\n    }\n\n    /** Sends a request to zoom into the image displayed by this surface. */\n    zoomIn(desiredScaleFactor: number){\n        let camera = this.renderer.camera;\n        let actual = camera.zoomIn(desiredScaleFactor);\n        if(actual != 1){\n            this.requestRender();\n        }\n    }\n\n    /** Sends a request to zoom out of the image displayed by this surface. */\n    zoomOut(desiredScaleFactor: number){\n        this.zoomIn(1/desiredScaleFactor);\n    }\n\n    /** Sends a request to zoom into the image displayed by this surface while fixing the specified focus point. */\n    zoomToPoint(desiredScaleFactor: number, focus: Point.Like) {\n        let camera = this.renderer.camera;\n        let actual = camera.zoomToPoint(desiredScaleFactor, focus);\n        if(actual.scale != 1 || Vec2.length2(actual.offset) != 0){\n            this.requestRender();\n        }\n        return actual;\n    }\n\n    /** Maps a screen point to canvas space. */\n    mapScreenPointToCanvas(screenPoint: ScreenPoint): Point.Like {\n        return {\n            x: screenPoint.clientX - this.clientRect.left,\n            y: screenPoint.clientY - this.clientRect.top\n        };\n    }\n\n    /** Maps a screen point to NDC space [0,1].*/\n    mapScreenPointToNdc(screenPoint: ScreenPoint) {\n        return this.mapCanvasPointToNdc(this.mapScreenPointToCanvas(screenPoint));\n    }\n\n    /** Maps a screen point to clip space. */\n    mapScreenPointToWorld(screenPoint: ScreenPoint) {\n        return this.mapNdcToWorld(this.mapScreenPointToNdc(screenPoint));\n    }\n\n    /** Maps a canvas coordinate to NDC space [0,1]. */\n    mapCanvasPointToNdc(canvasPoint: Point.Like) {\n        let {width, height} = this.clientRect;\n        let x = canvasPoint.x / width;\n        let y = (height - canvasPoint.y) / height; // Flip in y axis\n        return {x: x, y: y};\n    }\n\n    /** Maps a normalized device coordinate (NDC) to world space. */\n    mapNdcToWorld(ndc: Point.Like) {\n        let view = this.renderer.camera.view; // Depends on what is currently in view\n        let x = view.left + (ndc.x * view.width);\n        let y = view.bottom + (ndc.y * view.height);\n        return {x: x, y: y};\n    }\n};\n","export interface Uniforms {\n    readonly [name: string]: WebGLUniformLocation;\n    projection: WebGLUniformLocation;\n    lineWidth: WebGLUniformLocation;\n    fillColor: WebGLUniformLocation;\n    strokeColor: WebGLUniformLocation;\n}\n\nexport interface Attributes {\n    readonly [name: string]: number;\n    model: number;\n    offset: number;\n    position: number;\n}\n\nexport type Variables = Uniforms|Attributes;\n\nexport const vertex = \"precision mediump float;uniform mat4 z;uniform float s;attribute mat2 c;attribute vec2 v,h;varying vec2 f,e;mat2 i(float a){float b=sin(a),d=cos(a);return mat2(d,b,-b,d);}void main(){float j=c[0].x,k=c[1].x,l=c[0].y,m=c[1].y,a=(j+m)/2.,b=(j-m)/2.,d=(l+k)/2.,g=(l-k)/2.,n=sqrt(a*a+g*g),o=sqrt(b*b+d*d),A=n+o,p=n-o,q=atan(d,b),r=atan(g,a),w=(r-q)/2.,x=(r+q)/2.;mat2 t=i(x),u=i(w);t[1]*=sign(p),p=abs(p);vec2 y=t*(s*(u*h)),B=c*h+v+y;gl_Position=z*vec4(B,1.,1.),e=u*h,f=e*(1.+s/vec2(A,p));}\", fragment = \"precision mediump float;uniform vec4 C,D;varying vec2 f,e;void main(){bool a=dot(f,f)<1.,b=dot(e,e)<1.;gl_FragColor=a?C:b?D:vec4(0.);}\", attributeRenaming = {\"model\":\"c\",\"offset\":\"v\",\"position\":\"h\"}, uniformRenaming = {\"projection\":\"z\",\"lineWidth\":\"s\",\"fillColor\":\"C\",\"strokeColor\":\"D\"};\n","export interface Uniforms {\n    readonly [name: string]: WebGLUniformLocation;\n    projection: WebGLUniformLocation;\n    color: WebGLUniformLocation;\n}\n\nexport interface Attributes {\n    readonly [name: string]: number;\n    model: number;\n    offset: number;\n    position: number;\n}\n\nexport type Variables = Uniforms|Attributes;\n\nexport const vertex = \"precision mediump float;uniform mat4 d;attribute mat2 a;attribute vec2 b,c;void main(){vec2 e=a*c+b;gl_Position=d*vec4(e,1.,1.);}\", fragment = \"precision mediump float;uniform vec4 f;void main(){gl_FragColor=f;}\", attributeRenaming = {\"model\":\"a\",\"offset\":\"b\",\"position\":\"c\"}, uniformRenaming = {\"projection\":\"d\",\"color\":\"f\"};\n","import { pad, randomByte } from \"./util\";\n\nexport interface Like {\n    /** The red component of this color, a value between 0 and 0xff */\n    r: number;\n    /** The green component of this color, a value between 0 and 0xff */\n    g: number;\n    /** The blue component of this, a value between 0 and 0xff */\n    b: number;\n    /** The alpha component of this color, a value between 0 and 0xff */\n    a: number;\n}\n\n/** Copies a color */\nexport function copy(c: Like, out = <Like> {}) {\n    out.r = c.r;\n    out.g = c.g;\n    out.b = c.b;\n    out.a = c.a;\n    return out;\n}\n\n/** Converts an 0xrrggbbaa int to a color */\nexport function fromRgbaInt(rgba: number, out = <Like> {}) {\n    out.r = (rgba >> 24) & 0xff;\n    out.g = (rgba >> 16) & 0xff;\n    out.b = (rgba >> 8) & 0xff;\n    out.a = (rgba >> 0) & 0xff;\n    return out;\n}\n\n/** Converts an 0xrrggbb int to a (fully opaque) color */\nexport function fromRgbInt(rgb: number, out = <Like> {}) {\n    return fromRgbaInt((rgb << 8) | 0xff, out);\n}\n\n/** Converts a color to an 0xrrggbbaa int */\nexport function toRgbaInt(c: Like) {\n    let r = c.r << 24;\n    let g = c.g << 16;\n    let b = c.b << 8;\n    let a = c.a << 0;\n    return (r | g | b | a) >>> 0; // Convert to unsigned\n}\n\n/** Converts an #aarrggbb string to a color. The leading # is optional. */\nexport function fromArgbString(argb: string, out = <Like> {}) {\n    let i = argb[0] == '#' ? 1 : 0;\n    out.a = parseInt(argb.substr(i, 2), 16);\n    out.r = parseInt(argb.substr(i + 2, 2), 16);\n    out.g = parseInt(argb.substr(i + 4, 2), 16);\n    out.b = parseInt(argb.substr(i + 6, 2), 16);\n    return out;\n}\n\n/** Converts a color to an #aarrggbb string. */\nexport function toArgbString(c: Like) {\n    let a = pad(c.a.toString(16)); // aa\n    let r = pad(c.r.toString(16)); // rr\n    let g = pad(c.g.toString(16)); // gg\n    let b = pad(c.b.toString(16)); // bb\n    return '#' + a + r + g + b; // #aarrggbb\n}\n\n/** Creates a random color. Preserves the alpha value of the out param if specified; otherwise defaults to fully opaque */\nexport function random(out = <Like> {}) {\n    out.r = randomByte();\n    out.g = randomByte();\n    out.b = randomByte();\n    out.a = out.a === undefined ? 0xff : out.a;\n    return out;\n}\n\n/** Blends src into dst using (src.alpha, 1-src.alpha) blend mode */\nexport function blend(src: Like, dst: Like, out = <Like> {}) {\n    let alpha = src.a + 1, invAlpha = 256 - src.a;\n    out.r = (alpha * src.r + invAlpha * dst.r) >> 8; // divide by 2^8\n    out.g = (alpha * src.g + invAlpha * dst.g) >> 8;\n    out.b = (alpha * src.b + invAlpha * dst.b) >> 8;\n    out.a = dst.a;\n    return out;\n}\n\n/** Checks if a color is fully opaque */\nexport function isOpaque(c: Like) {\n    return c.a === 0xff;\n}\n\n/** Checks if a color is fully transparent */\nexport function isTransparent(c: Like) {\n    return c.a === 0;\n}\n\n/** Checks if c1 and c2 are equal */\nexport function equals(c1: Like, c2: Like) {\n    return c1.r == c2.r\n        && c1.g == c2.g\n        && c1.b == c2.b\n        && c1.a == c2.a;\n}","import { Color  } from '..';\n\n// These functions are the same\nexport { copy, isTransparent, Like } from './color'; \n\n/** Checks if c1 and c2 are approximately equal */\nexport function equals(c1: Color.Like, c2: Color.Like, e = 0) {\n    return Math.abs(c1.r - c2.r) <= e\n        && Math.abs(c1.g - c2.g) <= e\n        && Math.abs(c1.b - c2.b) <= e;\n}\n\n/** Converts a byte-based rgba color to a float-based rgba color */\nexport function fromColor(src: Color.Like, out = <Color.Like> {}){\n    out.r = src.r / 0xff;\n    out.g = src.g / 0xff;\n    out.b = src.b / 0xff;\n    out.a = src.a / 0xff;\n    return out;\n}\n\n/** Converts a float-based rgba color to a byte-based rgba color */\nexport function toColor(src: Color.Like, out = <Color.Like> {}){\n    out.r = (src.r * 0xff) >> 0;\n    out.g = (src.g * 0xff) >> 0;\n    out.b = (src.b * 0xff) >> 0;\n    out.a = (src.a * 0xff) >> 0;\n    return out;\n}\n\n/** Creates a random color. Preserves the alpha value of the out param if specified; otherwise defaults to fully opaque */\nexport function random(out = <Color.Like> {}) {\n    out.r = Math.random();\n    out.g = Math.random();\n    out.b = Math.random();\n    out.a = out.a === undefined ? 1 : out.a;\n    return out;\n}\n\n/** Checks if a color is fully opaque */\nexport function isOpaque(c: Color.Like) {\n    return c.a === 1;\n}\n\n/** Premultiplies the (r,g,b) components of a color by it's alpha component */\nexport function premultiplyAlpha(c: Color.Like, out = <Color.Like> {}) {\n    out.r = c.r * c.a;\n    out.g = c.g * c.a;\n    out.b = c.b * c.a;\n    out.a = 1;\n    return out;\n}","import { Point, Rect, Vec2 } from \"..\";\n\nexport interface Like {\n    /** The semi x axis of this ellipse, that is, the distance from the center of this ellipse to its left and right vertices. */\n    rx: number;\n    /**  The semi y axis of this ellipse, that is, the distance from the center of this ellipse to its top and bottom vertices. */\n    ry: number;\n    /** The point at the center of this ellipse. */\n    c: Point.Like;\n}\n\n/** Copies an ellipse */\nexport function copy(e: Like, out = <Like> {}) {\n    out.rx = e.rx;\n    out.ry = e.ry;\n    out.c = Point.copy(e.c, out.c);\n    return out;\n}\n\n/** Creates a circle with radius r centered at point c */\nexport function circle(r: number, c: Point.Like, out = <Like> {}) {\n    return copy({rx: r, ry: r, c: c}, out);\n}\n\n/** Creates an ellipse with the specified boundaries */\nexport function fromRect(r: Rect, out = <Like> {}) {\n    return copy({rx: r.width / 2, ry: r.height / 2, c: r.center()}, out);\n}\n\n/** Check if an ellipse contains the specified point */\nexport function containsPoint(e: Like, p: Point.Like) {\n    // Similar to point in circle problem, but need to account for x/y axes\n    let d = Vec2.fromPointToPoint(p, e.c); \n    let sx = d.x / e.rx;\n    let sy = d.y / e.ry;\n    return (sx * sx) + (sy * sy) <= 1;\n}\n\n/** Checks if e1 and e2 are approximately equal */\nexport function equals(e1: Like, e2: Like, e = 0) {\n    return Math.abs(e1.rx - e2.rx) <= e\n        && Math.abs(e1.ry - e2.ry) <= e\n        && Point.equals(e1.c, e2.c, e);\n}\n ","import { Point, Vec2 } from \"..\";\n\nexport class LineSegment {\n    constructor(\n        /** The point at one end of this line segment */\n        public p1: Point.Like, \n        /** The point at the other end of this line segment */\n        public p2: Point.Like\n    ) {}\n\n    get midpoint() {\n        return Point.midpoint(this.p1, this.p2);\n    }\n\n    get length() {\n        return Point.distance(this.p1, this.p2);\n    }\n\n    /** Checks if the distance from this line to (x,y) is less than or equal to epsilon  */\n    containsPoint(p: Point.Like, epsilon = 0) {\n        // Paramaterize the line segment to a + bt, 0<=t<=1\n        let a = this.p1,\n            b = Vec2.fromPointToPoint(this.p1, this.p2),\n            t = -1;\n\n        // Find the value of t that produces a point closest to point p (using vector projection)\n        let v = Vec2.fromPointToPoint(a, p);\n        let len2 = Vec2.length2(b);\n        if (len2 != 0) { //in case of 0 length line\n            t = Vec2.dot(b, v) / len2;\n        }\n\n        // If t does not produce a point on our line segment, then then the line segment does not contain the point\n        if (t < 0 || t > 1) {\n            return false;\n        }\n\n        // The distance between the given point and specified point must be less than epsilon\n        // As an optimization, we check distance squared to avoid having to take the square root\n        let closest = Vec2.add(a, Vec2.multiply(b, t));\n        let dist2 = Point.distance2(closest, p);\n        return dist2 <= (epsilon * epsilon);\n    }\n\n    /** Copies a line segment */\n    copy() {\n        return new LineSegment(Point.copy(this.p1), Point.copy(this.p2));\n    }\n\n    /** Checks if l1 and l2 are approximately equal */\n    equals(l: LineSegment, e = 0) {\n        return Point.equals(this.p1, l.p1, e) \n            && Point.equals(this.p2, l.p2, e);\n    }\n}\n","import { Point, Rect, Vec2 } from \"..\";\n\nexport interface Like {\n    /** The first entry in the first column of this Mat2d */\n    c1r1: number;\n    /** The second entry in the first column of this Mat2d */\n    c1r2: number;\n    /** The first entry in the second column of this Mat2d */\n    c2r1: number;\n    /** The second entry in the second column of this Mat2d */\n    c2r2: number;\n    /** The first entry in the third column of this Mat2d */\n    c3r1: number;\n    /** The second entry in the third column of this Mat2d */\n    c3r2: number;\n}\n\n/** Copies a 2d matrix */\nexport function copy(m: Like, out = <Like> {}) {\n    out.c1r1 = m.c1r1; out.c2r1 = m.c2r1; out.c3r1 = m.c3r1;\n    out.c1r2 = m.c1r2; out.c2r2 = m.c2r2; out.c3r2 = m.c3r2;\n    return out;\n}\n\n/** Inverts a 2d matrix. */\nexport function invert(m: Like, out = <Like> {}){\n    let det = determinant(m);\n    let { c1r1, c2r1, c3r1, c1r2, c2r2, c3r2 } = m;\n    out.c1r1 = c2r2 / det;\n    out.c2r1 = -c2r1 / det;\n    out.c3r1 = ((c2r1 * c3r2) - (c3r1 * c2r2)) / det;\n    out.c1r2 = -c1r2 / det;\n    out.c2r2 = c1r1 / det;\n    out.c3r2 = ((c1r2 * c3r1) - (c1r1 * c3r2)) / det;\n    return out;\n}\n\n/** Computes the determinant of a 2d matrix. */\nexport function determinant(m: Like) {\n    return (m.c1r1 * m.c2r2) - (m.c2r1 * m.c1r2);\n}\n\n/** Concatenates 2 matrices together by multiplication: left * right */\nexport function concat(left: Like, right: Like, out = <Like> {}) {\n    // Calculate the first row, fixing the first left hand row\n    // and moving across each of the right hand columns\n    let c1r1 = left.c1r1 * right.c1r1 + left.c2r1 * right.c1r2;\n    let c2r1 = left.c1r1 * right.c2r1 + left.c2r1 * right.c2r2;\n    let c3r1 = left.c1r1 * right.c3r1 + left.c2r1 * right.c3r2 + left.c3r1;\n    // Calculate the second row, fixing the second left hand row\n    // and moving across each of the right hand columns\n    let c1r2 = left.c1r2 * right.c1r1 + left.c2r2 * right.c1r2;\n    let c2r2 = left.c1r2 * right.c2r1 + left.c2r2 * right.c2r2;\n    let c3r2 = left.c1r2 * right.c3r1 + left.c2r2 * right.c3r2 + left.c3r2;\n    // Output the result\n    out.c1r1 = c1r1; out.c2r1 = c2r1; out.c3r1 = c3r1;\n    out.c1r2 = c1r2; out.c2r2 = c2r2; out.c3r2 = c3r2;\n    return out;\n}\n\n/** Pivots the fixed point of a matrix by the specified vector */\nexport function pivot(m: Like, v: Point.Like, out = <Like> {}) {\n    return conjugate(m, translate(v), out);\n}\n\n/** Conjugates a matrix by the specified conjugator matrix */\nexport function conjugate(m: Like, conjugator: Like, out = <Like> {}) {\n    return concat(conjugator, concat(m, invert(conjugator)), out);\n}\n\n/** Creates an identity matrix */\nexport function identity(out = <Like> {}) {\n    out.c1r1 = 1; out.c2r1 = 0; out.c3r1 = 0;\n    out.c1r2 = 0; out.c2r2 = 1; out.c3r2 = 0;\n    return out;\n}\n\n/** Creates a matrix to translate by the specified vector */\nexport function translate({x, y}: Vec2.Like, out = <Like> {}) {\n    out.c1r1 = 1; out.c2r1 = 0; out.c3r1 = x;\n    out.c1r2 = 0; out.c2r2 = 1; out.c3r2 = y;\n    return out;\n}\n\n/** Creates a matrix to scale by the specified vector */\nexport function scale({x, y}: Vec2.Like, out = <Like> {}) {\n    out.c1r1 = x; out.c2r1 = 0; out.c3r1 = 0;\n    out.c1r2 = 0; out.c2r2 = y; out.c3r2 = 0;\n    return out;\n}\n\n/** Creates a matrix to scale from the specified start point to the specified end point, with a pivot point at p. */\nexport function scaleToPoint(start: Point.Like, end: Point.Like, p: Point.Like, out = <Like> {}) {\n    let v1 = Vec2.fromPointToPoint(p, start);\n    let v2 = Vec2.fromPointToPoint(p, end);\n    let s = scale({x: v2.x / v1.x, y: v2.y / v1.y}, out);\n    return pivot(s, p, out);\n}\n\n/** Creates a matrix to scale by the specified factor */\nexport function stretch(factor: number, out = <Like> {}) {\n    return scale({x: factor, y: factor}, out); \n}\n\n/** Creates a matrix to rotate by the specified number of radians */\nexport function rotate(radians: number, out = <Like> {}) {\n    return sinCos(Math.sin(radians), Math.cos(radians), out);\n}\n\n/** Creates a matrix to stretch and rotate from the specified start point to the specified end point, with a pivot point at p. */\nexport function stretchRotateToPoint(start: Point.Like, end: Point.Like, p: Point.Like, out = <Like> {}) {\n    // Determine the stretch ratio\n    let v1 = Vec2.fromPointToPoint(p, start);\n    let v2 = Vec2.fromPointToPoint(p, end);\n    let l1 = Vec2.length(v1);\n    let l2 = Vec2.length(v2);\n    let s = stretch(l2 / l1);\n\n    // Determine the sin and cos of the rotation angle\n    let n1 = Vec2.divide(v1, l1);\n    let n2 = Vec2.divide(v2, l2);\n    let sin = Vec2.cross(n1, n2);\n    let cos = Vec2.dot(n1, n2);\n    let r = sinCos(sin, cos);\n\n    // Rotate first, then stretch\n    return pivot(concat(s, r), p, out);\n}\n\n/** Creates a matrix to rotate by the specified sine and cosine values */\nexport function sinCos(sin: number, cos: number, out = <Like> {}) {\n    out.c1r1 = cos; out.c2r1 = -sin; out.c3r1 = 0;\n    out.c1r2 = sin; out.c2r2 = cos; out.c3r2 = 0;\n    return out;\n}\n\n/** Scale to fit options for a rect-to-rect matrix. */\nexport const enum ScaleToFit {\n    /** Stretches the src rect to fit inside dst, then centers the src rect inside the dst rect */\n    Center,\n    /** Stretches the src rect to fit inside dst, then translates the src rect to the bottom right corner of the dst rect */\n    End,\n    /** Scales the src rect to fit inside dst exactly, then translates src to dst */\n    Fill,\n    /** Stretches the src rect to fit inside dst, then translates the src rect to top left corner of the dst rect*/\n    Start\n};\n\n/** Creates a matrix to map src into dst using the specifed scale to fit option  */\nexport function rectToRect(src: Rect, dst: Rect, stf = ScaleToFit.Fill, out = <Like> {}) {\n    // Translate to origin\n    let origin = {x: 0, y: 0};\n    let srcPoint = getScaleToFitPoint(src, stf);\n    let dstPoint = getScaleToFitPoint(dst, stf);\n    translate(Vec2.fromPointToPoint(srcPoint, origin), out); \n\n    // Apply the scale\n    let sx = dst.width / src.width;\n    let sy = dst.height / src.height;\n    let scaleMatrix = stf == ScaleToFit.Fill ? scale({x: sx, y: sy}) : stretch(Math.min(sx, sy));\n    concat(scaleMatrix, out, out);\n\n    // Translate to destination point\n    let translation = translate(Vec2.fromPointToPoint(origin, dstPoint));\n    return concat(translation, out, out);\n}\n\n/** Determine which point to match based on the scale to fit option. */\nfunction getScaleToFitPoint(r: Rect, stf: ScaleToFit): Point.Like {\n    switch (stf) {\n        case ScaleToFit.Center:\n            return r.center();\n        case ScaleToFit.End:\n            return r.bottomRight();\n        default:\n            return r.topLeft();\n    }\n}\n\n/** Maps a point by the specified matrix */\nexport function mapPoint(m: Like, {x, y}: Point.Like, out = <Point.Like> {}) {\n    out.x = m.c1r1 * x + m.c2r1 * y + m.c3r1;\n    out.y = m.c1r2 * x + m.c2r2 * y + m.c3r2;\n    return out;\n}\n\n/** Maps a rect by the specified matrix */\nexport function mapRect(m: Like, r: Rect, out = Rect.empty()) {\n    let {x, y} = mapPoint(m, r.topLeft()); \n    let corners = [r.bottomLeft(), r.bottomRight(), r.topRight()];\n    out.left = out.right = x; \n    out.top = out.bottom = y;\n    for (let corner of corners) {\n        out.unionPoint(mapPoint(m, corner));\n    }\n    return out;\n}\n\n/** Checks if two matrices are approximately equal */\nexport function equals(m1: Like, m2: Like, e = 0) {\n    return Math.abs(m1.c1r1 - m2.c1r1) <= e\n        && Math.abs(m1.c1r2 - m2.c1r2) <= e\n        && Math.abs(m1.c2r1 - m2.c2r1) <= e\n        && Math.abs(m1.c2r2 - m2.c2r2) <= e\n        && Math.abs(m1.c3r1 - m2.c3r1) <= e\n        && Math.abs(m1.c3r2 - m2.c3r2) <= e\n}","import { Rect } from '..';\n\n/**\n * Creates an othogonal transformation matrix.\n * @param clip the near clipping plane viewport.\n * @param near the depth (negative z coordinate) of the near clipping plane.\n * @param far the depth (negative z coordinate) of the far clipping plane.\n */\nexport function ortho(clip: Rect, near: number, far: number, out: Float32Array) {\n    let width = clip.width,\n        height = clip.height,\n        depth = near - far;\n\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n\n    out[4] = 0;\n    out[5] = 2 / height;\n    out[6] = 0;\n    out[7] = 0;\n\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1 / depth;\n    out[11] = 0;\n\n    out[12] = -(clip.right + clip.left) / width;\n    out[13] = -(clip.top + clip.bottom) / height;\n    out[14] = -near / depth;\n    out[15] = 1;\n}\n","import { Vec2 } from \"..\";\n\nexport interface Like {\n    x: number;\n    y: number;\n}\n\n/** Copies a point */\nexport function copy(p: Like, out = <Like> {}) {\n    out.x = p.x;\n    out.y = p.y;\n    return out;\n}\n\n/** Computes the midpoint of p1 and p2 */\nexport function midpoint(p1: Like, p2: Like, out = <Like> {}) {\n    return Vec2.multiply(Vec2.add(p1, p2, out), 0.5, out);\n}\n\n/** Computes the distance between p1 and p2 */\nexport function distance(p1: Like, p2: Like) {\n    return Math.sqrt(distance2(p1, p2));\n}\n\n/** Computes the distance squared between p1 and p2 */\nexport function distance2(p1: Like, p2: Like) {\n    return Vec2.length2(Vec2.fromPointToPoint(p1, p2));\n}\n\n/** Checks if p1 and p2 are approximately equal */\nexport function equals(p1: Like, p2: Like, e = 0) {\n    return Math.abs(p1.x - p2.x) <= e\n        && Math.abs(p1.y - p2.y) <= e;\n}","import { Point, Vec2 } from \"..\";\n\nexport interface RectLike {\n    /** The left boundary of this Rect */\n    left: number;\n    /** The top boundary of this Rect */\n    top: number;\n    /** The right boundary of this Rect */\n    right: number;\n    /** The bottom boundary of this Rect */\n    bottom: number;\n}\nexport class Rect implements RectLike {\n\n    static copy(r: RectLike) {\n        return new Rect(r.left, r.top, r.right, r.bottom);\n    }\n\n    /** Creates an empty rect */\n    static empty() {\n        return new Rect(0, 0, 0, 0);\n    }\n\n    /** Creates this rect with the specified dimensions */\n    static dimensions(left: number, top: number, width: number, height: number) {\n        return new Rect(left, top, left + width, top - height);\n    }\n\n    constructor(\n        public left: number,\n        public top: number,\n        public right: number,\n        public bottom: number\n    ) {}\n\n    /** Measures the width of this rect */\n    get width() {\n        return this.right - this.left;\n    }\n\n    set width(w: number) {\n        this.right = this.left + w;\n    }\n\n    /** Measures the height of this rect */\n    get height() {\n        return this.top - this.bottom;\n    }\n\n    set height(h: number) {\n        this.bottom = this.top - h;\n    }\n\n    get aspect() {\n        return this.width / this.height;\n    }\n\n    /** Measures the area of this rect */\n    get area() {\n        return this.width * this.height;\n    }\n\n    /** Gets the point at the center of this rect */\n    center(out = <Point.Like> {}) {\n        out.x = this.centerX;\n        out.y = this.centerY;\n        return out;\n    }\n\n    /** Measures the x-coordinate of the point at the center of this rect */\n    get centerX() {\n        return 0.5 * (this.left + this.right);\n    }\n\n    /** Measures the y-coordinate of the point at the center of this rect */\n    get centerY() {\n        return 0.5 * (this.bottom + this.top);\n    }\n\n    /** Gets the point at the top left corner of this rect */\n    topLeft(out = <Point.Like> {}) {\n        out.x = this.left;\n        out.y = this.top;\n        return out;\n    }\n\n    /** Gets the point at the bottom left corner of this rect */\n    bottomLeft(out = <Point.Like> {}) {\n        out.x = this.left;\n        out.y = this.bottom;\n        return out;\n    }\n\n    /** Gets the point at the bottom right corner of this rect */\n    bottomRight(out = <Point.Like> {}) {\n        out.x = this.right;\n        out.y = this.bottom;\n        return out;\n    }\n\n    /** Gets the point at the top right corner of this rect */\n    topRight(out = <Point.Like> {}) {\n        out.x = this.right;\n        out.y = this.top;\n        return out;\n    }\n\n    /** Checks if this rect is empty. True if left >= right or bottom >= top. */\n    isEmpty() {\n        return this.left >= this.right || this.bottom >= this.top;\n    }\n\n    /** Checks if the boundaries of this Rect represent a valid rectangle. True if right >= left and top >= bottom. */\n    isValid() {\n        return this.right >= this.left && this.top >= this.bottom;\n    }\n\n    /** Expands this rect to include the other rect */\n    union(r: RectLike) {\n        this.left = Math.min(this.left, r.left);\n        this.right = Math.max(this.right, r.right);\n        this.bottom = Math.min(this.bottom, r.bottom);\n        this.top = Math.max(this.top, r.top);\n    }\n\n    /** Expands this rect to enclose the specified point */\n    unionPoint({x, y}: Point.Like) {\n        this.left = Math.min(x, this.left);\n        this.top = Math.max(y, this.top);\n        this.right = Math.max(x, this.right);\n        this.bottom = Math.min(y, this.bottom);\n    }\n\n    /** Checks if this rect intersects the other rect */\n    intersects(r: RectLike) {\n        return this.right >= r.left && r.right >= this.left && this.top >= r.bottom && r.top >= this.bottom;\n    }\n\n    /** Finds the intersection of this rect with the other rect */\n    intersect(r: RectLike) {\n        this.left = Math.max(this.left, r.left);\n        this.right = Math.min(this.right, r.right);\n        this.bottom = Math.max(this.bottom, r.bottom);\n        this.top = Math.min(this.top, r.top);\n    }\n\n    /** Insets the boundaries of this rect by the specified vector. */\n    inset({x, y}: Vec2.Like) {\n        this.left += x;\n        this.top -= y;\n        this.right -= x;\n        this.bottom += y;\n    }\n\n    /** Offsets the position of this rect by the specified vector */\n    offset({x, y}: Vec2.Like) {\n        this.offsetX(x);\n        this.offsetY(y);\n    }\n\n    /** Offsets the position of this rect by the specified change in x (dx) */\n    offsetX(dx: number) {\n        this.left += dx;\n        this.right += dx;\n    }\n\n    /** Offsets the position of this rect by the specified change in y (dy) */\n    offsetY(dy: number) {\n        this.top += dy;\n        this.bottom += dy;\n    }\n\n    /** Checks if this rect contains the other rect */\n    contains(r: RectLike) {\n        return this.left <= r.left && r.right <= this.right &&\n            this.bottom <= r.bottom && r.top <= this.top;\n    }\n\n    /** Checks if this rect contains the specified point */\n    containsPoint({x, y}: Point.Like) {\n        return this.containsX(x) && this.containsY(y);\n    }\n\n    /** Checks if this rect contains any point with the specified x coordinate  */\n    containsX(x: number) {\n        return this.left <= x && x <= this.right;\n    }\n\n    /** Checks if this rect contains any point with the specified y coordinate  */\n    containsY(y: number) {\n        return this.bottom <= y && y <= this.top;\n    }\n\n    /** Swaps the top/bottom or left/right boundaries of this rect if they are flipped, meaning left > right and/or top > bottom */\n    sort() {\n        let {top, left, bottom, right} = this;\n        let vFlipped = bottom > top;\n        let hFlipped = left > right;\n        this.top = vFlipped ? bottom : top;\n        this.left = hFlipped ? right : left;\n        this.bottom = vFlipped ? top : bottom;\n        this.right = hFlipped ? left : right;\n    }\n\n    /** Checks if this rect is approximately equal to the other rect */\n    equals(r: RectLike, e = 0) {\n        return Math.abs(this.left - r.left) <= e\n            && Math.abs(this.top - r.top) <= e\n            && Math.abs(this.right - r.right) <= e\n            && Math.abs(this.bottom - r.bottom) <= e;\n    }\n}\n","export function pad(str: string) {\n    return (str.length == 1) ? '0' + str : str;\n}\n\n/** Returns a random integer between min (inclusive) and max (inclusive) */\nexport function randomInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/** Returns a random byte value between 0 and 0xff */\nexport function randomByte() {\n    return randomInt(0, 0xff);\n}","import { Point, Rect } from \"..\";\n\n/** A two-dimensional vector with (x,y) components */\nexport interface Like {\n    x: number;\n    y: number;\n}\n\n/** Copies a */\nexport function copy(v: Like, out = <Like> {}) {\n    out.x = v.x;\n    out.y = v.y;\n    return out;\n}\n\n/** Returns v1 + v2 (component-wise addition) */\nexport function add(v1: Like, v2: Like, out = <Like> {}) {\n    out.x = v1.x + v2.x;\n    out.y = v1.y + v2.y;\n    return out;\n}\n\n/** Returns v1 - v2 (component-wise subtraction) */\nexport function subtract(v1: Like, v2: Like, out = <Like> {}) {\n    out.x = v1.x - v2.x;\n    out.y = v1.y - v2.y;\n    return out;\n}\n\n/** Multiplies each component of a vector by the specified factor */\nexport function multiply({x, y}: Like, factor: number, out = <Like> {}) {\n    out.x = x * factor;\n    out.y = y * factor;\n    return out;\n}\n\n/** Divides each component of a vector by the specified factor */\nexport function divide({x, y}: Like, factor: number, out = <Like> {}) {\n    out.x = x / factor;\n    out.y = y / factor;\n    return out;\n}\n\n/** Measures the length of a vector */\nexport function length(v: Like) {\n    return Math.sqrt(length2(v));\n}\n\n/** Measures the length squared of a vector */\nexport function length2({x, y}: Like) {\n    return x * x + y * y;\n}\n\n/** Computes the dot product of v1 and v2 */\nexport function dot(v1: Like, v2: Like) {\n    return v1.x * v2.x + v1.y * v2.y;\n}\n\n/** Computes the cross product of v1 with v2. */\nexport function cross(v1: Like, v2: Like) {\n    return (v1.x * v2.y) - (v2.x * v1.y);\n}\n \n/* Normalizes a vector so that it has a length of 1 */\nexport function normalize(v: Like, out = <Like> {}) {\n    return divide(v, length(v), out);\n}\n\n/** Rotates a vector 90 degrees CCW (to the right) */\nexport function rotate90({x, y}: Like, out = <Like> {}) {\n    out.x = y;\n    out.y = -x;\n    return out;\n}\n\n/** Rotates a vector 180 degrees CCW (flipping it) */\nexport function rotate180({x, y}: Like, out = <Like> {}) {\n    out.x = -x;\n    out.y = -y;\n    return out;\n}\n\n/** Rotates a vector 270 degrees CCW (90 degree to the left) */\nexport function rotate270({x, y}: Like, out = <Like> {}) {\n    out.x = -y;\n    out.y = x;\n    return out;\n}\n\n/** Measures the vector from p1 (initial point) to p2 (terminal point) */\nexport function fromPointToPoint(p1: Point.Like, p2: Point.Like, out = <Like> {}) {\n    out.x = p2.x - p1.x;\n    out.y = p2.y - p1.y;\n    return out;\n}\n\n/** Bounds a translation vector to prevent it from mapping point p outside of bounds r */\nexport function bound(v: Like, p: Point.Like, b: Rect, out = <Like> {}) {\n    out.x = boundX(v.x, p.x, b);\n    out.y = boundY(v.y, p.y, b);\n    return out;\n}\n\n/** Bounds the x-component of a translation vector to prevent it from mapping the x-coordinate of a point outside of bounds b */\nexport function boundX(dx: number, x: number, b: Rect) {\n    let targetX = dx + x;\n    let side = dx < 0 ? b.left : b.right;\n    return b.containsX(targetX) ? dx : side - x;\n}\n\n/** Bounds the y-component of a translation vector to prevent it from mapping the y-coordinate of a point outside of bounds b */\nexport function boundY(dy: number, y: number, b: Rect) {\n    let targetY = dy + y;\n    let side = dy < 0 ? b.bottom : b.top;\n    return b.containsY(targetY) ? dy : side - y;\n}\n\n/**\n * Finds the miter vector needed to join the two specified lines. Assumes the lines are measured from points listed in CCW order.\n * @param line1 The nonzero vector from the start of the first line to the end of the first line. \n * @param line2 The nonzero vector from the start of the second line to the end of the second line. \n * @param lineWidth The width of the second line (or half the width, if joining at the center of the lines).\n * @param miterLimit The maximum allowable miter length before a bevel is applied. Usually some multiple of lineWidth.\n */\nexport function miter(line1: Like, line2: Like, lineWidth: number, miterLimit: number, out = <Like> {}){\n    let n1 = normalize(rotate90(line1));\n    let n2 = normalize(rotate90(line2));\n    let direction = normalize(add(n1, n2));\n    let length = Math.min(miterLimit, lineWidth / dot(direction, n2));\n    return multiply(direction, length, out);\n}\n\n/** Checks if v1 and v2 are approximately equal */\nexport function equals(v1: Like, v2: Like, e = 0) {\n    return Math.abs(v1.x - v2.x) <= e\n        && Math.abs(v1.y - v2.y) <= e;\n}","import { Point, Pointer, PointerEventListener, Vec2 } from \"..\";\n\nexport class PanTool extends PointerEventListener {\n\n    private previous: Point.Like;\n\n    wherePointer(p: Pointer) {\n        return p.isDown && p.activePointers.length == 1;\n    }\n\n    onPointerDown(p: Pointer) {\n        this.previous = p.position;\n    }\n\n    onPointerMove({position, surface}: Pointer) {\n        let toPrevious = Vec2.fromPointToPoint(position, this.previous); \n        let actual = surface.pan(toPrevious);\n        Vec2.add(actual, position, this.previous);\n    }\n}\n   ","import { LineSegment, Point, Pointer, PointerEventListener, Vec2 } from \"..\";\n\nexport class PinchZoomTool extends PointerEventListener {\n\n    private previousSpan: number;\n    private previousFocus: Point.Like;\n\n    wherePointer(p: Pointer) {\n        return p.isDown && p.activePointers.length == 2;\n    }\n\n    onPointerDown(p: Pointer) {\n        let line = this.measureLine(p);\n        this.previousSpan = line.length;\n        this.previousFocus = line.midpoint;\n    }\n\n    onPointerMove(p: Pointer) {\n        let line = this.measureLine(p);\n        let scale = line.length / this.previousSpan;\n        let focus = Point.midpoint(line.midpoint, this.previousFocus);\n        let actual = p.surface.zoomToPoint(scale, focus);\n        this.previousSpan = line.length / actual.scale;\n        this.previousFocus = Vec2.add(actual.offset, this.previousFocus);\n    }\n\n    private measureLine({activePointers}: Pointer) {\n        let p1 = activePointers[0].position;\n        let p2 = activePointers[1].position;\n        return new LineSegment(p1, p2);\n    }\n}\n  ","\nimport { Vec2, Point } from '..';\n\nexport class Stroke {\n\n    public readonly vertices = <Point.Like[]> [];\n\n    /**\n     * Begins this stroke at the specified point.\n     * @param p where to begin the stroke.\n     * @param thickness the thickness of the initial line.\n     */\n    moveTo({x, y}: Point.Like, thickness: number) {\n        let halfThickness = thickness * 0.5;\n        let top = {x: x, y: y + halfThickness};\n        let bot = {x: x, y: y - halfThickness};\n        this.vertices.push(top, bot);\n    }\n\n   /**\n     * Adds a line to the specified point.\n     * @param point the point at the end of the line.\n     * @param thickness the thickness of the line.\n     */\n    lineTo(p: Point.Like, thickness: number) {\n        let nextIndex = this.vertices.length;\n        if (nextIndex < 2) {\n            throw \"Must make a call to moveTo() before making a call to lineTo()\"\n        }\n\n        let halfThickness = 0.5 * thickness\n        let prevCen = this.getPreviousPoint(nextIndex);\n        let line = Vec2.fromPointToPoint(prevCen, p);\n        let prevLine = null;\n        \n        // Merge with previous line if the length of either line is less than half of the desired thickness\n        if (nextIndex >= 4) {\n            let prevPrevCen = this.getPreviousPoint(nextIndex - 2);\n            prevLine = Vec2.fromPointToPoint(prevPrevCen, prevCen);\n            if(Vec2.length(line) <= halfThickness && Vec2.length(prevLine) <= halfThickness){\n                nextIndex -= 2;\n                prevCen = prevPrevCen;\n                line = Vec2.fromPointToPoint(prevCen, p);\n                prevLine = nextIndex >= 4 ? this.getPreviousPoint(nextIndex - 2) : null;\n            }\n        }\n\n        // If there are more than two line segments (with non-zero length), use a miter vector to join them. \n        // Otherwise use the ortho vector to compute the top and bottom left vertices of the line segment.\n        let ortho = Vec2.multiply(Vec2.normalize(Vec2.rotate90(line)), halfThickness);\n        let useMiter = prevLine !== null && Vec2.length(prevLine) > thickness / 8; \n        let miter = useMiter ? Vec2.miter(prevLine, line, halfThickness, thickness) : ortho;\n\n        // Join to previous line\n        this.vertices[nextIndex - 2] = Vec2.add(prevCen, miter);\n        this.vertices[nextIndex - 1] = Vec2.subtract(prevCen, miter);\n        this.vertices[nextIndex + 0] = Vec2.add(p, ortho);\n        this.vertices[nextIndex + 1] = Vec2.subtract(p, ortho);\n    }\n\n    private getPreviousPoint(currIndex: number) {\n        let vertices = this.vertices;\n        let prevTop = vertices[currIndex - 2];\n        let prevBot = vertices[currIndex - 1];\n        return Point.midpoint(prevTop, prevBot);\n    }\n}\n","import {Wheel, WheelEventListener} from '..'\n\n/** Tool for zooming in and out of a surface based on scroll events and cursor position. */\nexport class WheelZoomTool implements WheelEventListener {\n\n    constructor(\n        /** The scale applied to the surface when zooming in. The inverse is applied when zooming out. */\n        public scaleFactor: number\n    ){}\n\n    onWheel(wheel: Wheel) {\n        let scale = wheel.deltaY < 0 ? this.scaleFactor : 1 / this.scaleFactor;\n        let actual = wheel.surface.zoomToPoint(scale, wheel.position);\n    }\n}","import { Drawable, FillProgram, Mat2dBuffer, PolygonModel, Renderer } from \"@wjheesen/glib\";\n\nexport class Scene implements Drawable {\n\n    constructor(\n        private fill: FillProgram,\n        private hexagon: PolygonModel,\n        private matrices: Mat2dBuffer\n    ) {}\n\n    draw(renderer: Renderer): void {\n        let { gl } = renderer;\n        gl.clearColor(0, 0, 0, 0);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        gl.enable(gl.CULL_FACE);\n        gl.cullFace(gl.BACK);\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n        this.fill.draw(renderer, this.hexagon.mesh, this.matrices);\n    }\n}","import { Camera,  Renderer, Surface, Rect, PolygonMesh, ProgramUtil, FillProgram, PolygonModel, Mat2dBuffer, ColorBuffer, Color, ColorF, Mat2d, WheelZoomTool, PointerEventDetector, PanTool, PinchZoomTool } from '@wjheesen/glib';\nimport { Scene } from './hexel/scene';\n\nlet canvasEl = <HTMLCanvasElement> document.getElementById('onscreen-canvas');\nlet camera = new Camera(new Rect(-1, 1, 1, -1), 0.5, 10);\nlet renderer = new Renderer(canvasEl.getContext('webgl2'), camera);\nlet hexMesh =  PolygonMesh.regularPolygon(6);\nlet util = new ProgramUtil(renderer.gl);\nlet matBuf = Mat2dBuffer.withLength(1);\nlet hexagon = new PolygonModel(hexMesh, matBuf.get(0));\nMat2d.identity(hexagon.matrix);\nlet fill = FillProgram.create(util, [hexMesh]); \nfill.color = new ColorBuffer(new Float32Array([1,1,1,1]));\nColorF.random(fill.color);\nlet scene = new Scene(fill, hexagon, matBuf);\nlet surface = new Surface(canvasEl, renderer, scene);\nsurface.startRenderLoop();\n\nlet wheelEvents = surface.startDetectingWheelEvents();\nwheelEvents.addListener(new WheelZoomTool(1.1));\n\nlet pointerEvents = surface.startDetectingPointerEvents();\npointerEvents.addListener(new PanTool);\npointerEvents.addListener(new PinchZoomTool);","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module\n__webpack_require__(\"./src/index.ts\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}